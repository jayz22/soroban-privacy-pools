#![no_std]

use soroban_sdk::{
    crypto::bls12_381::Fr as BlsScalar,
    vec, Vec, Env, BytesN, U256,
};

/// Poseidon255 implementation based on the Circom circuit
/// This implements the same algorithm as poseidon255.circom
pub struct Poseidon255<'a> {
    env: &'a Env,
    round_constants: Vec<BlsScalar>, // Dynamic size based on t and rounds
    mds_matrix: Vec<Vec<BlsScalar>>, // Dynamic size based on t
}

impl<'a> Poseidon255<'a> {
    pub fn new(env: &'a Env) -> Self {
        // Initialize with hardcoded constants from poseidon255_constants.circom
        // For t=2, we use 67 rounds Ã— 2 width = 134 constants
        let round_constants = Self::get_round_constants_t2(env);
        let mds_matrix = Self::get_mds_matrix_t2(env);
        
        Self {
            env,
            round_constants,
            mds_matrix,
        }
    }
    
    pub fn new_with_t(env: &'a Env, t: usize) -> Self {
        if t < 2 || t > 7 {
            panic!("Poseidon255 only supports t values from 2 to 7");
        }
        
        let round_constants = Self::get_round_constants(env, t);
        let mds_matrix = Self::get_mds_matrix(env, t);
        
        Self {
            env,
            round_constants,
            mds_matrix,
        }
    }
    
    /// Get round constants for given t (from poseidon255_constants.circom)
    fn get_round_constants(env: &Env, t: usize) -> Vec<BlsScalar> {
        match t {
            2 => Self::get_round_constants_t2(env),
            3 => Self::get_round_constants_t3(env),
            _ => panic!("Constants for t={} not yet implemented", t)
        }
    }
    
    /// Get MDS matrix for given t (from poseidon255_constants.circom)
    fn get_mds_matrix(env: &Env, t: usize) -> Vec<Vec<BlsScalar>> {
        match t {
            2 => Self::get_mds_matrix_t2(env),
            3 => Self::get_mds_matrix_t3(env),
            _ => panic!("MDS matrix for t={} not yet implemented", t)
        }
    }
    
    /// Get round constants for t=2 (from poseidon255_constants.circom)
    fn get_round_constants_t2(env: &Env) -> Vec<BlsScalar> {
        // Constants for t=2 from poseidon255_constants.circom
        // These are the actual cryptographic constants
        let hex_constants = [
            "0x6267f5556c88257324c1c8b00d5871b2eba13cc39d72aa10dde6b69bc44c41c7",
            "0x30347723511438a085118166c68bf0c4f4ab5c10a2c55adb5cf87cc9e030f60f",
            "0x10db856965e40038eb6427303181e7b7439f1a051aa4630c26cf86d0a0451a4b",
            "0x5a3d2dcd541e4faaae7eb143eec847a0f652b6dc1b92e3f39ec23c808b3a5d63",
            "0x3b07f0ff7edcf93b1dd0487bc9fab1c6905f9ceee38dcce83efeb3a320398526",
            "0x40c73c524b9fd0fab63128175befe07b5c63ccdde9ca10e1a37205c9607fdf8a",
            "0x3a933861cf23752376d94dbb24b0f3c61630787928875c07672b68abfb9191e0",
            "0x71cc165e208570b2d5ef81db84e3c5e714ea4edfb36fc7fb11ef65a64b2d9755",
            "0x6c0dc9eb332b5d968bec8ad68fe24ce34087ea54093f153618434475bce402f8",
            "0x0af5bafd335dae5c86967b11d5dcefb986a54c9d60d35eb06dc7a3fd779b3906",
            "0x6e12847918f030f2626c150ab69e4be0f13d202ae1f8bc87ea74323e93372e3b",
            "0x5565d40e21d059a26db241ca125d9316283eadf144b1318e604e253eeae1fe9a",
            "0x608e01b42d3dca09fed9b54eadaaba3e4ce6aefe92b0dc954a0fa4683a9678f2",
            "0x16bbe434b24f94e2c40ed1f4f9bd7d17e5be96c3aec15579b35fd80f0f80de9e",
            "0x0d1be811a8e73220cab01ce981d475522c3d7dd9e2716c3a2cf4ddd541546890",
            "0x5997a3affb18f942868b86f8ee10a68966e90bac7bbd8c65ede7e6e5ef1f6320",
            "0x4d92e86d270041061eec80278079fca771499dea5ccdc99682a953bb3a038b8e",
            "0x616c8c5ce232b9314f694fc6a968446ea9daf7a4079ce1a75fcc950741d680bb",
            "0x677e31e7846d9131bdc350eaf11a8ff918dd258ddd800444424afab34dfdfe3d",
            "0x4e7d7f85aefc110b233525ee3e53851aee7d3241e2a132585e0e25005eee0b0e",
            "0x06a8b4539488b7dddc48c3a226dbda313f906e106f844196d55013d321244f13",
            "0x5091517b6a85783108999f8e6bda3c793bef3f2e9589641d260bdfde8bdef00d",
            "0x0d2703e5b30f54d7f414e901802d54f8c14cd6355415df6e0f063d16bef9c43a",
            "0x56f69096811148eb38eec143d32565c077b3d1a4a4351f2b458f43b1659d4495",
            "0x622d94d38d1ded428afd062008c5709b43a678f6ba518ec56383e8ffba473504",
            "0x2730c607bba7333723a4a44577819b7db82a24574f6d13eee4c856c1ca3de9c7",
            "0x01ac5f59256c5004dc1043c53b23800a3fbab53eb1a83f551056f227b514b9f6",
            "0x0790b92523c973f1c95b94937afbb5796d89481e7a56328b44bab5ba81ae42f3",
            "0x1d63b59d97bc269d13964fb3e8771d0acc749bc83eb2f0372484e266142bb8c0",
            "0x1a52d04e5f14a3a05f7a01262df9e68c77fdf7e2bfb56c8b252d2140efdf0914",
            "0x5aa9b3b808812b284857e8622843a8717fa5cb49b217017f31d79e8d0f963fc0",
            "0x6a3d18fdbeb1d77ec1304539b00e6188786dbbc4435269b4c6281367f42656e3",
            "0x4743e860df269a85dd76fb99dbe9d840eb669dc859754b3f74805e57ba288b00",
            "0x6c32cac3946825f80a434c5ab397fc1a1c6a9bdfaab53175d4cf3d29ddb6cbc6",
            "0x333b0eea5da7ed1e3959d16280a361aa77dd24ecbfb28e1b2583ac4e9894305c",
            "0x3b503fc333b795ccc0c5bb3ae26b077dc3742cb745ec8821648c5ce7ebd9df18",
            "0x4fa5853188d9f728a17532d94bee6fb28fee510380a5d50927c6c5b1ce283444",
            "0x5d2ed8a6603a905bac490ebfb9e6c18f0bc9da1bbc2173291b18de6b6186118f",
            "0x2d830a53584c5556264852f075c78f7f9eb068016ae88af9cda933d6ae52eca7",
            "0x0250f4d6780ad29ae60e55f135b9ac80ccc7c81e3add37db276c26f1a2b1b86e",
            "0x6e3e9595f59220599e23e830728d4a0c4d62515ec1ed10b72446cf4df5b4c308",
            "0x2cd3314555d6faf23ee90cdb884f1c4697ebe98e3a450a624c4d896233b93cd5",
            "0x584a408d0f370543b8413fee70a060a394e561f504d8679f7bece4bf222e4108",
            "0x499cd53437b9fcbf7479c00fcc21295759074ce9bd1bb1fbd3460237aef4759e",
            "0x56a9b567bd0646effd0608d74d537991136098d9a06af6cb3ff8f010efb57578",
            "0x6a5fae2b00d968b931441b374e27ba4d03b306bd602d48731677169e75a67e8c",
            "0x2e1cc28e390e64aa1d60edb99c0aeda7c8c32bdb01ba11abbad5026b46eccb27",
            "0x2d4820000675df7c276beac408fe2e851e734a7008ae09bbcb3c96c70024f71b",
            "0x0c2fe101a2b52b538b902c6b2dc992cb266f7636e05b0c068385b5fa19e97142",
            "0x209b790b78c0e7927c6a178ef2f00b8687fc7bd4f21a9e02578551535002bc95",
            "0x2dd0926cf56bbaaec6491513d08a9983f94a910852a7b4ea4bd4222b93e14c10",
            "0x4316b39dd7d65b1bb575198104d409b169236a7ade371f7ab176fcbae75a5f0d",
            "0x540276d61041b91f6ea3068ec260a9338b6e3da15d934e648c24f35aee04e535",
            "0x37af612900b839977b146324c84772c58a4ccc0f6494cc054571827e74bfd2d3",
            "0x2af00c93d59ed14c9911e5cb3781d772371e83228e4267bbce11d065c1955338",
            "0x62b48779b0cf7ff2c10fd9b91a6ff7b7a99f935e961a5a94aa38f9d4f71c8b4c",
            "0x540bf5bbe01f28563bcbe11a2ce346d8231a2cdd0fe07641f9fa89e5c21978e3",
            "0x232b6c847a6d23912cb10ecbe50b53491f67f71e9b87a4a30446f2218017874b",
            "0x0ab34adbe77b8f1e57a370e4fd626071eea74b3f0b66644a629efaa0e96456c0",
            "0x1a83e43ef118c90046b1bdbeab8dd5cdcab632807c2cd0dc9147cbc5b7084be8",
            "0x1ec6fa41b41b672d9005468720918130b642567462a3d557a595d4dc6c56f2f9",
            "0x01f81a153199a751a111b8f5212cfc5bf82aacf0287d03e1864f8e5713fe4a17",
            "0x2617307587a675f4ecd73a54a7b206162d751cabf3d9fd007bcca4de2c6f0649",
            "0x1647be94c515178c7974a245624b642bb1ae6e2d4e1682087e362d7f98bc953f",
            "0x6e690b956e00b9e339dec49d675586f661f9b081ee3fa7696d73977658aa6fea",
            "0x660b85bc22de06d476c47bf084ad436f59874f1d630c0f5c91fbef51d5e738c5",
            "0x32bf3d451b69dde075fc370eaa8c1b77b5c0bc2aab1c7b46da7ef9d1840b0419",
            "0x73924b40beaa9c1ce4074c2154d1af4d658c09395a568b99b2fbcc3b5685e810",
            "0x17cbb3ee0adcb9d977e96e9152b36042925244fdd0aa184c7a89a58a2dc40097",
            "0x29d76a821e3220775c552f6b5977ab94956e52b8dac36ef88ace050d553766a3",
            "0x62b1a6c06ab26881a1fe57eceac56b5aec0b96da7211557f4e27ec24296d7db6",
            "0x0dfc474151e5c605a693a51ae8227cc0a99fdc4524fc2810c6eda9035d04334d",
            "0x3e287088506bb38d2ed465cdab37a7b2eedafb47557446a9aec9d366a91b1d98",
            "0x2641d2919d0bed24673c9effc24578798c56f3cd39940030aff2c913cf58974a",
            "0x286c1f841a05bb667c84d93ba9359da901a545ecb1c6a37403c5e74d0a663cf9",
            "0x68159ff06a0aff28d53ecaae5654db9f3017f564378fccb68af2a47f10788d17",
            "0x432ff6c037e9ce6e61172862cc076d925d00f4414fa4f4d8722c4b1460c2f04b",
            "0x5e1a35f47c87b33cd37544c51d7dda1d7e262af52b11133df163d2c94e9f0674",
            "0x0b8d4686183872494b4416fc82317a4deae10e7c312aeb8a44697b49b1025df5",
            "0x6291c6d458499cffd8915196bde5fdcdb7eb5ef6b1e6d15aab7d8e95cda2c564",
            "0x0e2f4df2de6504553f057c1046bb04decf779baff7457cce028c4f55d4f4f0ed",
            "0x1694268ccf0cf400d1c77259d9766437e5a35810b854022829ead0b3e70aeba4",
            "0x3c96c51a30dc76af38c9c08c36ee90b626c28910a0994e0854b5375e7f46698b",
            "0x5a99402864789e9d2bd2930a70a54adb66865923b4a17ef36a107020e44a73dc",
            "0x5a22c7703f1ab4a55031fc34aab0732018e931ba48c8c38c65bfaf5e610ab7af",
            "0x686fea106123473955c3e9365afa2238a5e35390360884ed7555a8c5f8d66a20",
            "0x6a68607546ff48f9d154b924ccf0fd85b608ad351e4bcffd6097d4d175ea53bc",
            "0x21077e81fe5a0bde7f6f2631f93cb33d07d1928befec6a434bc0616ef5b3dddb",
            "0x11aeb10c549bc49d3ea21f84ea42ba3374a80c7504186d3c9c9476e7a380fb90",
            "0x4dfbc6f6a54a316d331770308f53534a01f4b9a50210cb081fdee076e3fd6871",
            "0x0e9ba2efbd177a7c3e3ba0716b5de50a24937f94bd97491941e064704a024904",
            "0x1dda541f2f744aaee3c50c2d9abc405d8fbd01e3e5c22f4192d893f45788e9d6",
            "0x2ec1165caf7fd1589fbd8cf29049439a0c266d9c002c5d77b656a2e28db097b3",
            "0x1f8cc6e561bde673e0bbbfb882419c31575e4b7ae66cde549443f95dc23566ec",
            "0x57d97d4b02423d7738690fbea9e0b7ba8eb1ad651986f869ff96a932fedbe6d3",
            "0x1205704bf8e95ba26bca37a88295daeba494546ea8efe7189efb000e0bcfbdd0",
            "0x016cdeebdb6f8b37fbbd4ef80645d2473d21df81eee935ec540836f06eb49d38",
            "0x19b8a2f4a6403c98add6f220ff4938fe7b5ca43c78095f14184923bdfa0cae33",
            "0x19358aab5822facc694ee0a27a4ec9fb6bf931d5efb8ce59c25d67bb017e26d5",
            "0x0c7a80ba8f7372a2bee14572b6967720c9853f811188cd44fe24e764a2e7affe",
            "0x3894fe113139129d6f42058e3f871ac109b87f7fcffc317321cc1e428f9b48c4",
            "0x1aefc0785946d65ef0e62be601da8cad8e94f5e3f96a177c235740d5fb406ab9",
            "0x0af1c4fc0b49030fe545ef543ac1b16640288c36554ee106e7d1e06a4e1626b3",
            "0x5848a8b1f2645e1c36b603a083689b50b760744f96bdf07a2df821e584023884",
            "0x1318aac0f0ef72e5e0233ca168ea6c21a4e162e00d3ba70d79087df4660154f4",
            "0x4179cc529ed5ddd4aa1acf77e50d12bb9a754df8bfcb0ff6c6e1073e8cbfe8ea",
            "0x005983d5e4d5d48c2c80a4dd83083db023217247ece5e0514e49b90cd73e3d05",
            "0x5c198603562a2e473d5486f461f4fc776051ab0bfc00526df55541b87e47c11b",
            "0x39c93d11962620d7c5396532137173d6746356c6821ff03734d59af52a6ad067",
            "0x2475bc5acc012b8083fcc7d2ccb15127a2bc7bec09dbce1319e5f680bed75fa7",
            "0x66729d8d26c113573bcb9dcd84bdbca5fb0aede246e1f5659762ce88a38abc7a",
            "0x0bb442eba5baf8e728df8eb9c2cb17ed8ac2909427f0a608ddbede534265c995",
            "0x4a432bd0cf7b12c3f31ff6ef7033982cfb702a89df14ad1457e9e108e0093e0f",
            "0x3d120149595e0c7fa884fe33f287ea54841a94be027702ea9881ad9227204ecd",
            "0x35e47349a427ba8b1df4bf4f5f1da532f25c44be406a90def22e870301d051e0",
            "0x19caf5fbbc0a1424525971b573841109f36dc3e07eb1df7fd69d4e1fd34abcec",
            "0x4d94360247806752a4c1e622c2964069456601b666c900aa8686ae74c00d33be",
            "0x515cce538dcf5280c18d4d2973a2fd4eda2304d6f0bb0b45d01bf9a2b1fcae38",
            "0x5d157e3dbf20d63c3e0783a96c763b96f28ad0548a44fabba29463d5fb759390",
            "0x50c6439188ea7d8153949b6f5f64c10df7bf884d31b9680323781406fc84d4c8",
            "0x06ab7adf0f997badc0b95360e3d992b0d5dafe9fce2c807f5de11ea819123651",
            "0x6212d6f6db15bcc7f3b1637efbfa8d08c5faebeab89d265bb7a0585b96306900",
            "0x5f674e12cce1d53f2d01b06ea1874335f8c7634443b29b300ff011a4e4822783",
            "0x01865aba8ec3d89aca45cc1da7d8ca5e2b31a8a44178a0d6e665fbe83d63cdd2",
            "0x221d9df33836d262a34e9566471db96efbe80c8e0602d8ea7af1c2560afc4ed9",
            "0x0f12e59c448a18bae09585d74c637be4ef24ec3d5ba000964cf76c6032d159af",
            "0x10376fa0adb3a50540dfd9aa95fa8b5c120f4e6843590ed156b5fcb93ecb7a27",
            "0x031597a49ea890a50ed8381799fa51e27e540902ada5f8d8a7529a980458eac8"
        ];
        
        let mut constants = vec![env];
        
        // Parse the actual hex constants
        for hex_str in hex_constants.iter() {
            constants.push_back(Self::parse_hex_to_scalar(env, hex_str));
        }
        
        constants
    }
    
    /// Get MDS matrix for t=2 (from poseidon255_constants.circom)
    fn get_mds_matrix_t2(env: &Env) -> Vec<Vec<BlsScalar>> {
        // Precomputed byte arrays for MDS matrix t=2 to avoid runtime hex parsing
        const MDS_MATRIX_BYTES: [[[u8; 32]; 2]; 2] = [
            [
                [0x1e, 0x6d, 0x0c, 0xd9, 0x36, 0x71, 0x4f, 0x21, 0x24, 0xfc, 0x4c, 0x78, 0x32, 0x12, 0x66, 0x17, 0x4f, 0xe2, 0x85, 0x5e, 0x68, 0x9c, 0x65, 0x11, 0xa3, 0x6e, 0xca, 0xdc, 0x3c, 0xcc, 0xc2, 0x68],
                [0x12, 0x40, 0x40, 0x6f, 0xed, 0x29, 0x61, 0x8b, 0x55, 0x15, 0xb2, 0x17, 0x04, 0x37, 0xe1, 0xcb, 0xe9, 0xdb, 0xf8, 0x14, 0xd6, 0x30, 0xe4, 0xc7, 0x11, 0x09, 0xf7, 0x4a, 0x15, 0x7a, 0x9b, 0xcd]
            ],
            [
                [0x70, 0x72, 0x00, 0x66, 0xb0, 0x15, 0x0a, 0xa4, 0x15, 0xf3, 0xff, 0xf2, 0x6e, 0xa0, 0xb2, 0x31, 0xe6, 0x57, 0xf6, 0x31, 0x12, 0xa3, 0x6a, 0x97, 0xf0, 0x83, 0x3f, 0x3c, 0x18, 0xdf, 0xa4, 0xc5],
                [0x6b, 0x07, 0xf5, 0x5f, 0x01, 0xbb, 0x14, 0x4f, 0xec, 0xe2, 0xd7, 0x06, 0x82, 0x41, 0xce, 0xf3, 0xed, 0xa1, 0xab, 0xa1, 0x73, 0x0d, 0xab, 0x73, 0x36, 0x7f, 0x3d, 0x06, 0xe9, 0x94, 0xa2, 0x3e]
            ]
        ];

        let mut matrix = vec![env];
        for row in MDS_MATRIX_BYTES.iter() {
            let mut matrix_row = vec![env];
            for bytes in row.iter() {
                matrix_row.push_back(BlsScalar::from_bytes(BytesN::from_array(env, bytes)));
            }
            matrix.push_back(matrix_row);
        }
        matrix
    }
    
    /// Get round constants for t=3 (from poseidon255_constants.circom)
    fn get_round_constants_t3(env: &Env) -> Vec<BlsScalar> {
        // Precomputed byte arrays for round constants t=3 to avoid runtime hex parsing
        // Constants for t=3 from poseidon255_constants.circom (192 constants total)
        const ROUND_CONSTANTS_BYTES: [[u8; 32]; 192] = [
            [0x6f, 0x00, 0x7a, 0x55, 0x11, 0x56, 0xb3, 0xa4, 0x49, 0xe4, 0x49, 0x36, 0xb7, 0xc0, 0x93, 0x64, 0x4a, 0x0e, 0xd3, 0x3f, 0x33, 0xea, 0xcc, 0xc6, 0x28, 0xe9, 0x42, 0xe8, 0x36, 0xc1, 0xa8, 0x75],
            [0x36, 0x0d, 0x74, 0x70, 0x61, 0x1e, 0x47, 0x3d, 0x35, 0x3f, 0x62, 0x8f, 0x76, 0xd1, 0x10, 0xf3, 0x4e, 0x71, 0x16, 0x2f, 0x31, 0x00, 0x3b, 0x70, 0x57, 0x53, 0x8c, 0x25, 0x96, 0x42, 0x63, 0x03],
            [0x4b, 0x5f, 0xec, 0x3a, 0xa0, 0x73, 0xdf, 0x44, 0x01, 0x90, 0x91, 0xf0, 0x07, 0xa4, 0x4c, 0xa9, 0x96, 0x48, 0x49, 0x65, 0xf7, 0x03, 0x6d, 0xce, 0x3e, 0x9d, 0x09, 0x77, 0xed, 0xcd, 0xc0, 0xf6],
            [0x67, 0xcf, 0x18, 0x68, 0xaf, 0x63, 0x96, 0xc0, 0xb8, 0x4c, 0xce, 0x71, 0x5e, 0x53, 0x9f, 0x84, 0x9e, 0x06, 0xcd, 0x1c, 0x38, 0x3a, 0xc5, 0xb0, 0x61, 0x00, 0xc7, 0x6b, 0xcc, 0x97, 0x3a, 0x11],
            [0x55, 0x5d, 0xb4, 0xd1, 0xdc, 0xed, 0x81, 0x9f, 0x5d, 0x3d, 0xe7, 0x0f, 0xde, 0x83, 0xf1, 0xc7, 0xd3, 0xe8, 0xc9, 0x89, 0x68, 0xe5, 0x16, 0xa2, 0x3a, 0x77, 0x1a, 0x5c, 0x9c, 0x82, 0x57, 0xaa],
            [0x2b, 0xab, 0x94, 0xd7, 0xae, 0x22, 0x2d, 0x13, 0x5d, 0xc3, 0xc6, 0xc5, 0xfe, 0xbf, 0xaa, 0x31, 0x49, 0x08, 0xac, 0x2f, 0x12, 0xeb, 0xe0, 0x6f, 0xbd, 0xb7, 0x42, 0x13, 0xbf, 0x63, 0x18, 0x8b],
            [0x66, 0xf4, 0x4b, 0xe5, 0x29, 0x66, 0x82, 0xc4, 0xfa, 0x78, 0x82, 0x79, 0x9d, 0x6d, 0xd0, 0x49, 0xb6, 0xd7, 0xd2, 0xc9, 0x50, 0xcc, 0xf9, 0x8c, 0xf2, 0xe5, 0x0d, 0x6d, 0x1e, 0xbb, 0x77, 0xc2],
            [0x15, 0x0c, 0x93, 0xfe, 0xf6, 0x52, 0xfb, 0x1c, 0x2b, 0xf0, 0x3e, 0x1a, 0x29, 0xaa, 0x87, 0x1f, 0xef, 0x77, 0xe7, 0xd7, 0x36, 0x76, 0x6c, 0x5d, 0x09, 0x39, 0xd9, 0x27, 0x53, 0xcc, 0x5d, 0xc8],
            [0x32, 0x70, 0x66, 0x1e, 0x68, 0x92, 0x8b, 0x3a, 0x95, 0x5d, 0x55, 0xdb, 0x56, 0xdc, 0x57, 0xc1, 0x03, 0xcc, 0x0a, 0x60, 0x14, 0x1e, 0x89, 0x4e, 0x14, 0x25, 0x9d, 0xce, 0x53, 0x77, 0x82, 0xb2],
            [0x07, 0x3f, 0x11, 0x6f, 0x04, 0x12, 0x2e, 0x25, 0xa0, 0xb7, 0xaf, 0xe4, 0xe2, 0x05, 0x72, 0x99, 0xb4, 0x07, 0xc3, 0x70, 0xf2, 0xb5, 0xa1, 0xcc, 0xce, 0x9f, 0xb9, 0xff, 0xc3, 0x45, 0xaf, 0xb3],
            [0x40, 0x9f, 0xda, 0x22, 0x55, 0x8c, 0xfe, 0x4d, 0x3d, 0xd8, 0xdc, 0xe2, 0x4f, 0x69, 0xe7, 0x6f, 0x8c, 0x2a, 0xae, 0xb1, 0xdd, 0x0f, 0x09, 0xd6, 0x5e, 0x65, 0x4c, 0x71, 0xf3, 0x2a, 0xa2, 0x3f],
            [0x2a, 0x32, 0xec, 0x5c, 0x4e, 0xe5, 0xb1, 0x83, 0x7a, 0xff, 0xd0, 0x9c, 0x1f, 0x53, 0xf5, 0xfd, 0x55, 0xc9, 0xcd, 0x20, 0x61, 0xae, 0x93, 0xca, 0x8e, 0xba, 0xd7, 0x6f, 0xc7, 0x15, 0x54, 0xd8],
            [0x58, 0x48, 0xeb, 0xeb, 0x59, 0x23, 0xe9, 0x25, 0x55, 0xb7, 0x12, 0x4f, 0xff, 0xba, 0x5d, 0x6b, 0xd5, 0x71, 0xc6, 0xf9, 0x84, 0x19, 0x5e, 0xb9, 0xcf, 0xd3, 0xa3, 0xe8, 0xeb, 0x55, 0xb1, 0xd4],
            [0x27, 0x03, 0x26, 0xee, 0x03, 0x9d, 0xf1, 0x9e, 0x65, 0x1e, 0x2c, 0xfc, 0x74, 0x06, 0x28, 0xca, 0x63, 0x4d, 0x24, 0xfc, 0x6e, 0x25, 0x59, 0xf2, 0x2d, 0x8c, 0xcb, 0xe2, 0x92, 0xef, 0xee, 0xad],
            [0x27, 0xc6, 0x64, 0x2a, 0xc6, 0x33, 0xbc, 0x66, 0xdc, 0x10, 0x0f, 0xe7, 0xfc, 0xfa, 0x54, 0x91, 0x8a, 0xf8, 0x95, 0xbc, 0xe0, 0x12, 0xf1, 0x82, 0xa0, 0x68, 0xfc, 0x37, 0xc1, 0x82, 0xe2, 0x74],
            [0x1b, 0xdf, 0xd8, 0xb0, 0x14, 0x01, 0xc7, 0x0a, 0xd2, 0x7f, 0x57, 0x39, 0x69, 0x89, 0x12, 0x9d, 0x71, 0x0e, 0x1f, 0xb6, 0xab, 0x97, 0x6a, 0x45, 0x9c, 0xa1, 0x86, 0x82, 0xe2, 0x6d, 0x7f, 0xf9],
            [0x49, 0x1b, 0x9b, 0xa6, 0x98, 0x3b, 0xcf, 0x9f, 0x05, 0xfe, 0x47, 0x94, 0xad, 0xb4, 0x4a, 0x30, 0x87, 0x9b, 0xf8, 0x28, 0x96, 0x62, 0xe1, 0xf5, 0x7d, 0x90, 0xf6, 0x72, 0x41, 0x4e, 0x8a, 0x4a],
            [0x16, 0x2a, 0x14, 0xc6, 0x2f, 0x9a, 0x89, 0xb8, 0x14, 0xb9, 0xd6, 0xa9, 0xc8, 0x4d, 0xd6, 0x78, 0xf4, 0xf6, 0xfb, 0x3f, 0x90, 0x54, 0xd3, 0x73, 0xc8, 0x32, 0xd8, 0x24, 0x26, 0x1a, 0x35, 0xea],
            [0x2d, 0x19, 0x3e, 0x0f, 0x76, 0xde, 0x58, 0x6b, 0x2a, 0xf6, 0xf7, 0x9e, 0x31, 0x27, 0xfe, 0xea, 0xac, 0x0a, 0x1f, 0xc7, 0x1e, 0x2c, 0xf0, 0xc0, 0xf7, 0x98, 0x24, 0x66, 0x7b, 0x5b, 0x6b, 0xec],
            [0x46, 0xef, 0xd8, 0xa9, 0xa2, 0x62, 0xd6, 0xd8, 0xfd, 0xc9, 0xca, 0x5c, 0x04, 0xb0, 0x98, 0x2f, 0x24, 0xdd, 0xcc, 0x6e, 0x98, 0x63, 0x88, 0x5a, 0x6a, 0x73, 0x2a, 0x39, 0x06, 0xa0, 0x7b, 0x95],
            [0x50, 0x97, 0x17, 0xe0, 0xc2, 0x00, 0xe3, 0xc9, 0x2d, 0x8d, 0xca, 0x29, 0x73, 0xb3, 0xdb, 0x45, 0xf0, 0x78, 0x82, 0x94, 0x35, 0x1a, 0xd0, 0x7a, 0xe7, 0x5c, 0xbb, 0x78, 0x06, 0x93, 0xa7, 0x98],
            [0x72, 0x99, 0xb2, 0x84, 0x64, 0xa8, 0xc9, 0x4f, 0xb9, 0xd4, 0xdf, 0x61, 0x38, 0x0f, 0x39, 0xc0, 0xdc, 0xa9, 0xc2, 0xc0, 0x14, 0x11, 0x87, 0x89, 0xe2, 0x27, 0x25, 0x28, 0x20, 0xf0, 0x1b, 0xfc],
            [0x04, 0x4c, 0xa3, 0xcc, 0x4a, 0x85, 0xd7, 0x3b, 0x81, 0x69, 0x6e, 0xf1, 0x10, 0x4e, 0x67, 0x4f, 0x4f, 0xef, 0xf8, 0x29, 0x84, 0x99, 0x0f, 0xf8, 0x5d, 0x0b, 0xf5, 0x8d, 0xc8, 0xa4, 0xaa, 0x94],
            [0x1c, 0xba, 0xf2, 0xb3, 0x71, 0xda, 0xc6, 0xa8, 0x1d, 0x04, 0x53, 0x41, 0x6d, 0x3e, 0x23, 0x5c, 0xb8, 0xd9, 0xe2, 0xd4, 0xf3, 0x14, 0xf4, 0x6f, 0x61, 0x98, 0x78, 0x5f, 0x0c, 0xd6, 0xb9, 0xaf],
            [0x1d, 0x5b, 0x27, 0x77, 0x69, 0x2c, 0x20, 0x5b, 0x0e, 0x6c, 0x49, 0xd0, 0x61, 0xb6, 0xb5, 0xf4, 0x29, 0x3c, 0x4a, 0xb0, 0x38, 0xfd, 0xbb, 0xdc, 0x34, 0x3e, 0x07, 0x61, 0x0f, 0x3f, 0xed, 0xe5],
            [0x56, 0xae, 0x7c, 0x7a, 0x52, 0x93, 0xbd, 0xc2, 0x3e, 0x85, 0xe1, 0x69, 0x8c, 0x81, 0xc7, 0x7f, 0x8a, 0xd8, 0x8c, 0x4b, 0x33, 0xa5, 0x78, 0x04, 0x37, 0xad, 0x04, 0x7c, 0x6e, 0xdb, 0x59, 0xba],
            [0x2e, 0x9b, 0xdb, 0xba, 0x3d, 0xd3, 0x4b, 0xff, 0xaa, 0x30, 0x53, 0x5b, 0xdd, 0x74, 0x9a, 0x7e, 0x06, 0xa9, 0xad, 0xb0, 0xc1, 0xe6, 0xf9, 0x62, 0xf6, 0x0e, 0x97, 0x1b, 0x8d, 0x73, 0xb0, 0x4f],
            [0x2d, 0xe1, 0x18, 0x86, 0xb1, 0x80, 0x11, 0xca, 0x8b, 0xd5, 0xba, 0xe3, 0x69, 0x69, 0x29, 0x9f, 0xde, 0x40, 0xfb, 0xe2, 0x6d, 0x04, 0x7b, 0x05, 0x03, 0x5a, 0x13, 0x66, 0x1f, 0x22, 0x41, 0x8b],
            [0x2e, 0x07, 0xde, 0x17, 0x80, 0xb8, 0xa7, 0x0d, 0x0d, 0x5b, 0x4a, 0x3f, 0x18, 0x41, 0xdc, 0xd8, 0x2a, 0xb9, 0x39, 0x5c, 0x44, 0x9b, 0xe9, 0x47, 0xbc, 0x99, 0x88, 0x84, 0xba, 0x96, 0xa7, 0x21],
            [0x0f, 0x69, 0xf1, 0x85, 0x4d, 0x20, 0xca, 0x0c, 0xbb, 0xdb, 0x63, 0xdb, 0xd5, 0x2d, 0xad, 0x16, 0x25, 0x04, 0x40, 0xa9, 0x9d, 0x6b, 0x8a, 0xf3, 0x82, 0x5e, 0x4c, 0x2b, 0xb7, 0x49, 0x25, 0xca],
            [0x5d, 0xc9, 0x87, 0x31, 0x8e, 0x6e, 0x59, 0xc1, 0xaf, 0xb8, 0x7b, 0x65, 0x5d, 0xd5, 0x8c, 0xc1, 0xd2, 0x2e, 0x51, 0x3a, 0x05, 0x83, 0x8c, 0xd4, 0x58, 0x5d, 0x04, 0xb1, 0x35, 0xb9, 0x57, 0xca],
            [0x48, 0xb7, 0x25, 0x75, 0x85, 0x71, 0xc9, 0xdf, 0x6c, 0x01, 0xdc, 0x63, 0x9a, 0x85, 0xf0, 0x72, 0x97, 0x69, 0x6b, 0x1b, 0xb6, 0x78, 0x63, 0x3a, 0x29, 0xdc, 0x91, 0xde, 0x95, 0xef, 0x53, 0xf6],
            [0x5e, 0x56, 0x5e, 0x08, 0xc0, 0x82, 0x10, 0x99, 0x25, 0x6b, 0x56, 0x49, 0x0e, 0xae, 0xe1, 0xd5, 0x73, 0xaf, 0xd1, 0x0b, 0xb6, 0xd1, 0x7d, 0x13, 0xca, 0x4e, 0x5c, 0x61, 0x1b, 0x2a, 0x37, 0x18],
            [0x2e, 0xb1, 0xb2, 0x54, 0x17, 0xfe, 0x17, 0x67, 0x0d, 0x13, 0x5d, 0xc6, 0x39, 0xfb, 0x09, 0xa4, 0x6c, 0xe5, 0x11, 0x35, 0x07, 0xf9, 0x6d, 0xe9, 0x81, 0x6c, 0x05, 0x94, 0x22, 0xdc, 0x70, 0x5e],
            [0x11, 0x5c, 0xd0, 0xa0, 0x64, 0x3c, 0xfb, 0x98, 0x8c, 0x24, 0xcb, 0x44, 0xc3, 0xfa, 0xb4, 0x8a, 0xff, 0x36, 0xc6, 0x61, 0xd2, 0x6c, 0xc4, 0x2d, 0xb8, 0xb1, 0xbd, 0xf4, 0x95, 0x3b, 0xd8, 0x2c],
            [0x26, 0xca, 0x29, 0x3f, 0x7b, 0x2c, 0x46, 0x2d, 0x06, 0x6d, 0x73, 0x78, 0xb9, 0x99, 0x86, 0x8b, 0xbb, 0x57, 0xdd, 0xf1, 0x4e, 0x0f, 0x95, 0x8a, 0xde, 0x80, 0x16, 0x12, 0x31, 0x1d, 0x04, 0xcd],
            [0x41, 0x47, 0x40, 0x0d, 0x8e, 0x1a, 0xac, 0xcf, 0x31, 0x1a, 0x6b, 0x5b, 0x76, 0x20, 0x11, 0xab, 0x3e, 0x45, 0x32, 0x6e, 0x4d, 0x4b, 0x9d, 0xe2, 0x69, 0x92, 0x81, 0x6b, 0x99, 0xc5, 0x28, 0xac],
            [0x6b, 0x0d, 0xb7, 0xdc, 0xcc, 0x4b, 0xa1, 0xb2, 0x68, 0xf6, 0xbd, 0xcc, 0x4d, 0x37, 0x28, 0x48, 0xd4, 0xa7, 0x29, 0x76, 0xc2, 0x68, 0xea, 0x30, 0x51, 0x9a, 0x2f, 0x73, 0xe6, 0xdb, 0x4d, 0x55],
            [0x17, 0xbf, 0x1b, 0x93, 0xc4, 0xc7, 0xe0, 0x1a, 0x2a, 0x83, 0x0a, 0xa1, 0x62, 0x41, 0x2c, 0xd9, 0x0f, 0x16, 0x0b, 0xf9, 0xf7, 0x1e, 0x96, 0x7f, 0xf5, 0x20, 0x9d, 0x14, 0xb2, 0x48, 0x20, 0xca],
            [0x4b, 0x43, 0x1c, 0xd9, 0xef, 0xed, 0xbc, 0x94, 0xcf, 0x1e, 0xca, 0x6f, 0x9e, 0x9c, 0x18, 0x39, 0xd0, 0xe6, 0x6a, 0x8b, 0xff, 0xa8, 0xc8, 0x46, 0x4c, 0xac, 0x81, 0xa3, 0x9d, 0x3c, 0xf8, 0xf1],
            [0x35, 0xb4, 0x1a, 0x7a, 0xc4, 0xf3, 0xc5, 0x71, 0xa2, 0x4f, 0x84, 0x56, 0x36, 0x9c, 0x85, 0xdf, 0xe0, 0x3c, 0x03, 0x54, 0xbd, 0x8c, 0xfd, 0x38, 0x05, 0xc8, 0x6f, 0x2e, 0x7d, 0xc2, 0x93, 0xc5],
            [0x3b, 0x14, 0x80, 0x08, 0x05, 0x23, 0xc4, 0x39, 0x43, 0x59, 0x27, 0x99, 0x48, 0x49, 0xbe, 0xa9, 0x64, 0xe1, 0x4d, 0x3b, 0xeb, 0x2d, 0xdd, 0xde, 0x72, 0xac, 0x15, 0x6a, 0xf4, 0x35, 0xd0, 0x9e],
            [0x2c, 0xc6, 0x81, 0x00, 0x31, 0xdc, 0x1b, 0x0d, 0x49, 0x50, 0x85, 0x6d, 0xc9, 0x07, 0xd5, 0x75, 0x08, 0xe2, 0x86, 0x44, 0x2a, 0x2d, 0x3e, 0xb2, 0x27, 0x16, 0x18, 0xd8, 0x74, 0xb1, 0x4c, 0x6d],
            [0x6f, 0x41, 0x41, 0xc8, 0x40, 0x1c, 0x5a, 0x39, 0x5b, 0xa6, 0x79, 0x0e, 0xfd, 0x71, 0xc7, 0x0c, 0x04, 0xaf, 0xea, 0x06, 0xc3, 0xc9, 0x28, 0x26, 0xbc, 0xab, 0xdd, 0x5c, 0xb5, 0x47, 0x7d, 0x51],
            [0x25, 0xbd, 0xbb, 0xed, 0xa1, 0xbd, 0xe8, 0xc1, 0x05, 0x96, 0x18, 0xe2, 0xaf, 0xd2, 0xef, 0x99, 0x9e, 0x51, 0x7a, 0xa9, 0x3b, 0x78, 0x34, 0x1d, 0x91, 0xf3, 0x18, 0xc0, 0x9f, 0x0c, 0xb5, 0x66],
            [0x39, 0x2a, 0x4a, 0x87, 0x58, 0xe0, 0x6e, 0xe8, 0xb9, 0x5f, 0x33, 0xc2, 0x5d, 0xde, 0x8a, 0xc0, 0x2a, 0x5e, 0xd0, 0xa2, 0x7b, 0x61, 0x92, 0x6c, 0xc6, 0x31, 0x34, 0x87, 0x07, 0x3f, 0x7f, 0x7b],
            [0x27, 0x2a, 0x55, 0x87, 0x8a, 0x08, 0x44, 0x2b, 0x9a, 0xa6, 0x11, 0x1f, 0x4d, 0xe0, 0x09, 0x48, 0x5e, 0x6a, 0x6f, 0xd1, 0x5d, 0xb8, 0x93, 0x65, 0xe7, 0xbb, 0xce, 0xf0, 0x2e, 0xb5, 0x86, 0x6c],
            [0x63, 0x1e, 0xc1, 0xd6, 0xd2, 0x8d, 0xd9, 0xe8, 0x24, 0xee, 0x89, 0xa3, 0x07, 0x30, 0xae, 0xf7, 0xab, 0x46, 0x3a, 0xcf, 0xc9, 0xd1, 0x84, 0xb3, 0x55, 0xaa, 0x05, 0xfd, 0x69, 0x38, 0xea, 0xb5],
            [0x4e, 0xb6, 0xfd, 0xa1, 0x0f, 0xd0, 0xfb, 0xde, 0x02, 0xc7, 0x44, 0x9b, 0xfb, 0xdd, 0xc3, 0x5b, 0xcd, 0x82, 0x25, 0xe7, 0xe5, 0xc3, 0x83, 0x3a, 0x08, 0x18, 0xa1, 0x00, 0x40, 0x9d, 0xc6, 0xf2],
            [0x2d, 0x5b, 0x30, 0x8b, 0x0c, 0xf0, 0x2c, 0xdf, 0xef, 0xa1, 0x3c, 0x4e, 0x60, 0xe2, 0x62, 0x39, 0xa6, 0xeb, 0xba, 0x01, 0x16, 0x94, 0xdd, 0x12, 0x9b, 0x92, 0x5b, 0x3c, 0x5b, 0x21, 0xe0, 0xe2],
            [0x16, 0x54, 0x9f, 0xc6, 0xaf, 0x2f, 0x3b, 0x72, 0xdd, 0x5d, 0x29, 0x3d, 0x72, 0xe2, 0xe5, 0xf2, 0x44, 0xdf, 0xf4, 0x2f, 0x18, 0xb4, 0x6c, 0x56, 0xef, 0x38, 0xc5, 0x7c, 0x31, 0x16, 0x73, 0xac],
            [0x42, 0x33, 0x26, 0x77, 0xff, 0x35, 0x9c, 0x5e, 0x8d, 0xb8, 0x36, 0xd9, 0xf5, 0xfb, 0x54, 0x82, 0x2e, 0x39, 0xbd, 0x5e, 0x22, 0x34, 0x0b, 0xb9, 0xba, 0x97, 0x5b, 0xa1, 0xa9, 0x2b, 0xe3, 0x82],
            [0x49, 0xd7, 0xd2, 0xc0, 0xb4, 0x49, 0xe5, 0x17, 0x9b, 0xc5, 0xcc, 0xc3, 0xb4, 0x4c, 0x60, 0x75, 0xd9, 0x84, 0x9b, 0x56, 0x10, 0x46, 0x5f, 0x09, 0xea, 0x72, 0x5d, 0xdc, 0x97, 0x72, 0x3a, 0x94],
            [0x64, 0xc2, 0x0f, 0xb9, 0x0d, 0x7a, 0x00, 0x38, 0x31, 0x75, 0x7c, 0xc4, 0xc6, 0x22, 0x6f, 0x6e, 0x49, 0x85, 0xfc, 0x9e, 0xcb, 0x41, 0x6b, 0x9f, 0x68, 0x4c, 0xa0, 0x35, 0x1d, 0x96, 0x79, 0x04],
            [0x59, 0xcf, 0xf4, 0x0d, 0xe8, 0x3b, 0x52, 0xb4, 0x1b, 0xc4, 0x43, 0xd7, 0x97, 0x95, 0x10, 0xd7, 0x71, 0xc9, 0x40, 0xb9, 0x75, 0x8c, 0xa8, 0x20, 0xfe, 0x73, 0xb5, 0xc8, 0xd5, 0x58, 0x09, 0x34],
            [0x53, 0xdb, 0x27, 0x31, 0x73, 0x0c, 0x39, 0xb0, 0x4e, 0xdd, 0x87, 0x5f, 0xe3, 0xb7, 0xc8, 0x82, 0x80, 0x82, 0x85, 0xcd, 0xbc, 0x62, 0x1d, 0x7a, 0xf4, 0xf8, 0x0d, 0xd5, 0x3e, 0xbb, 0x71, 0xb0],
            [0x1b, 0x10, 0xbb, 0x7a, 0x82, 0xaf, 0xce, 0x39, 0xfa, 0x69, 0xc3, 0xa2, 0xad, 0x52, 0xf7, 0x6d, 0x76, 0x39, 0x82, 0x65, 0x34, 0x42, 0x03, 0x11, 0x9b, 0x71, 0x26, 0xd9, 0xb4, 0x68, 0x60, 0xdf],
            [0x56, 0x1b, 0x60, 0x12, 0xd6, 0x66, 0xbf, 0xe1, 0x79, 0xc4, 0xdd, 0x7f, 0x84, 0xcd, 0xd1, 0x53, 0x15, 0x96, 0xd3, 0xaa, 0xc7, 0xc5, 0x70, 0x0c, 0xeb, 0x31, 0x9f, 0x91, 0x04, 0x6a, 0x63, 0xc9],
            [0x0f, 0x1e, 0x75, 0x05, 0xeb, 0xd9, 0x1d, 0x2f, 0xc7, 0x9c, 0x2d, 0xf7, 0xdc, 0x98, 0xa3, 0xbe, 0xd1, 0xb3, 0x69, 0x68, 0xba, 0x04, 0x05, 0xc0, 0x90, 0xd2, 0x7f, 0x6a, 0x00, 0xb7, 0xdf, 0xc8],
            [0x2f, 0x31, 0x3f, 0xaf, 0x0d, 0x3f, 0x61, 0x87, 0x53, 0x7a, 0x74, 0x97, 0xa3, 0xb4, 0x3f, 0x46, 0x79, 0x7f, 0xd6, 0xe3, 0xf1, 0x8e, 0xb1, 0xca, 0xff, 0x45, 0x77, 0x56, 0xb8, 0x19, 0xbb, 0x20],
            [0x3a, 0x5c, 0xbb, 0x6d, 0xe4, 0x50, 0xb4, 0x81, 0xfa, 0x3c, 0xa6, 0x1c, 0x0e, 0xd1, 0x5b, 0xc5, 0x5c, 0xad, 0x11, 0xeb, 0xf0, 0xf7, 0xce, 0xb8, 0xf0, 0xbc, 0x3e, 0x73, 0x2e, 0xcb, 0x26, 0xf6],
            [0x68, 0x1d, 0x93, 0x41, 0x1b, 0xf8, 0xce, 0x63, 0xf6, 0x71, 0x6a, 0xef, 0xbd, 0x0e, 0x24, 0x50, 0x64, 0x54, 0xc0, 0x34, 0x8e, 0xe3, 0x8f, 0xab, 0xeb, 0x26, 0x47, 0x02, 0x71, 0x4c, 0xcf, 0x94],
            [0x51, 0x78, 0xe9, 0x40, 0xf5, 0x00, 0x04, 0x31, 0x26, 0x46, 0xb4, 0x36, 0x72, 0x7f, 0x0e, 0x80, 0xa7, 0xb8, 0xf2, 0xe9, 0xee, 0x1f, 0xdc, 0x67, 0x7c, 0x48, 0x31, 0xa7, 0x67, 0x27, 0x77, 0xfb],
            [0x3d, 0xab, 0x54, 0xbc, 0x9b, 0xef, 0x68, 0x8d, 0xd9, 0x20, 0x86, 0xe2, 0x53, 0xb4, 0x39, 0xd6, 0x51, 0xba, 0xa6, 0xe2, 0x0f, 0x89, 0x2b, 0x62, 0x86, 0x55, 0x27, 0xcb, 0xca, 0x91, 0x59, 0x82],
            [0x4b, 0x3c, 0xe7, 0x53, 0x11, 0x21, 0x8f, 0x9a, 0xe9, 0x05, 0xf8, 0x4e, 0xaa, 0x5b, 0x2b, 0x38, 0x18, 0x44, 0x8b, 0xbf, 0x39, 0x72, 0xe1, 0xaa, 0xd6, 0x9d, 0xe3, 0x21, 0x00, 0x90, 0x15, 0xd0],
            [0x06, 0xdb, 0xfb, 0x42, 0xb9, 0x79, 0x88, 0x4d, 0xe2, 0x80, 0xd3, 0x16, 0x70, 0x12, 0x3f, 0x74, 0x4c, 0x24, 0xb3, 0x3b, 0x41, 0x0f, 0xef, 0xd4, 0x36, 0x80, 0x45, 0xac, 0xf2, 0xb7, 0x1a, 0xe3],
            [0x06, 0x8d, 0x6b, 0x46, 0x08, 0xaa, 0xe8, 0x10, 0xc6, 0xf0, 0x39, 0xea, 0x19, 0x73, 0xa6, 0x3e, 0xb8, 0xd2, 0xde, 0x72, 0xe3, 0xd2, 0xc9, 0xec, 0xa7, 0xfc, 0x32, 0xd2, 0x2f, 0x18, 0xb9, 0xd3],
            [0x4c, 0x5c, 0x25, 0x45, 0x89, 0xa9, 0x2a, 0x36, 0x08, 0x4a, 0x57, 0xd3, 0xb1, 0xd9, 0x64, 0x27, 0x8a, 0xcc, 0x7e, 0x4f, 0xe8, 0xf6, 0x9f, 0x29, 0x55, 0x95, 0x4f, 0x27, 0xa7, 0x9c, 0xeb, 0xef],
            [0x6c, 0xba, 0xc5, 0xe1, 0x70, 0x09, 0x84, 0xeb, 0xc3, 0x2d, 0xa1, 0x5b, 0x4b, 0xb9, 0x68, 0x3f, 0xaa, 0xba, 0xb5, 0x5f, 0x67, 0xcc, 0xc4, 0xf7, 0x1d, 0x95, 0x60, 0xb3, 0x47, 0x5a, 0x77, 0xeb],
            [0x46, 0x03, 0xc4, 0x03, 0xbb, 0xfa, 0x9a, 0x17, 0x73, 0x8a, 0x5c, 0x62, 0x78, 0xea, 0xab, 0x1c, 0x37, 0xec, 0x30, 0xb0, 0x73, 0x7a, 0xa2, 0x40, 0x9f, 0xc4, 0x89, 0x80, 0x69, 0xeb, 0x98, 0x3c],
            [0x68, 0x94, 0xe7, 0xe2, 0x2b, 0x2c, 0x1d, 0x5c, 0x70, 0xa7, 0x12, 0xa6, 0x34, 0x5a, 0xe6, 0xb1, 0x92, 0xa9, 0xc8, 0x33, 0xa9, 0x23, 0x4c, 0x31, 0xc5, 0x6a, 0xac, 0xd1, 0x6b, 0xc2, 0xf1, 0x00],
            [0x5b, 0xe2, 0xcb, 0xbc, 0x44, 0x05, 0x3a, 0xd0, 0x8a, 0xfa, 0x4d, 0x1e, 0xab, 0xc7, 0xf3, 0xd2, 0x31, 0xee, 0xa7, 0x99, 0xb9, 0x3f, 0x22, 0x6e, 0x90, 0x5b, 0x7d, 0x4d, 0x65, 0xc5, 0x8e, 0xbb],
            [0x58, 0xe5, 0x5f, 0x28, 0x7b, 0x45, 0x3a, 0x98, 0x08, 0x62, 0x4a, 0x8c, 0x2a, 0x35, 0x3d, 0x52, 0x8d, 0xa0, 0xf7, 0xe7, 0x13, 0xa5, 0xc6, 0xd0, 0xd7, 0x71, 0x1e, 0x47, 0x06, 0x3f, 0xa6, 0x11],
            [0x36, 0x6e, 0xbf, 0xaf, 0xa3, 0xad, 0x38, 0x1c, 0x0e, 0xe2, 0x58, 0xc9, 0xb8, 0xfd, 0xfc, 0xcd, 0xb8, 0x68, 0xa7, 0xd7, 0xe1, 0xf1, 0xf6, 0x9a, 0x2b, 0x5d, 0xfc, 0xc5, 0x57, 0x25, 0x55, 0xdf],
            [0x45, 0x76, 0x6a, 0xb7, 0x28, 0x96, 0x8c, 0x64, 0x2f, 0x90, 0xd9, 0x7c, 0xcf, 0x55, 0x04, 0xdd, 0xc1, 0x05, 0x18, 0xa8, 0x19, 0xeb, 0xbc, 0xc4, 0xd0, 0x9c, 0x3f, 0x5d, 0x78, 0x4d, 0x67, 0xce],
            [0x39, 0x67, 0x8f, 0x65, 0x51, 0x2f, 0x1e, 0xe4, 0x04, 0xdb, 0x30, 0x24, 0xf4, 0x1d, 0x3f, 0x56, 0x7e, 0xf6, 0x6d, 0x89, 0xd0, 0x44, 0xd0, 0x22, 0xe6, 0xbc, 0x22, 0x9e, 0x95, 0xbc, 0x76, 0xb1],
            [0x46, 0x3a, 0xed, 0x1d, 0x2f, 0x1f, 0x95, 0x5e, 0x30, 0x78, 0xbe, 0x5b, 0xf7, 0xbf, 0xc4, 0x6f, 0xc0, 0xeb, 0x8c, 0x51, 0x55, 0x19, 0x06, 0xa8, 0x86, 0x8f, 0x18, 0xff, 0xae, 0x30, 0xcf, 0x4f],
            [0x21, 0x66, 0x8f, 0x01, 0x6a, 0x80, 0x63, 0xc0, 0xd5, 0x8b, 0x77, 0x50, 0xa3, 0xbc, 0x2f, 0xe1, 0xcf, 0x82, 0xc2, 0x5f, 0x99, 0xdc, 0x01, 0xa4, 0xe5, 0x34, 0xc8, 0x8f, 0xe5, 0x3d, 0x85, 0xfe],
            [0x39, 0xd0, 0x09, 0x94, 0xa8, 0xa5, 0x04, 0x6a, 0x1b, 0xc7, 0x49, 0x36, 0x3e, 0x98, 0xa7, 0x68, 0xe3, 0x4d, 0xea, 0x56, 0x43, 0x9f, 0xe1, 0x95, 0x4b, 0xef, 0x42, 0x9b, 0xc5, 0x33, 0x16, 0x08],
            [0x4d, 0x7f, 0x5d, 0xcd, 0x78, 0xec, 0xe9, 0xa9, 0x33, 0x98, 0x4d, 0xe3, 0x2c, 0x0b, 0x48, 0xfa, 0xc2, 0xbb, 0xa9, 0x1f, 0x26, 0x19, 0x96, 0xb8, 0xe9, 0xd1, 0x02, 0x17, 0x73, 0xbd, 0x07, 0xcc],
            [0x1f, 0x9d, 0xbd, 0xc3, 0xf8, 0x43, 0x12, 0x63, 0x6b, 0x20, 0x3b, 0xbe, 0x12, 0xfb, 0x34, 0x25, 0xb1, 0x63, 0xd4, 0x16, 0x05, 0xd3, 0x9f, 0x99, 0x77, 0x0c, 0x95, 0x6f, 0x60, 0xd8, 0x81, 0xb3],
            [0x02, 0x77, 0x45, 0xa9, 0xcd, 0xdf, 0xad, 0x95, 0xe5, 0xf1, 0x7b, 0x9e, 0x0e, 0xe0, 0xca, 0xb6, 0xbe, 0x0b, 0xc8, 0x29, 0xfe, 0x5e, 0x66, 0xc6, 0x97, 0x94, 0xa9, 0xf7, 0xc3, 0x36, 0xea, 0xb2],
            [0x1c, 0xec, 0x08, 0x03, 0xc5, 0x04, 0xb6, 0x35, 0x78, 0x8d, 0x69, 0x5c, 0x61, 0xe9, 0x32, 0x12, 0x2f, 0xa4, 0x3f, 0xe2, 0x0a, 0x45, 0xc7, 0x8d, 0x52, 0x02, 0x56, 0x57, 0xab, 0xd8, 0xae, 0xe0],
            [0x12, 0x35, 0x23, 0xd7, 0x5e, 0x9f, 0xab, 0xc1, 0x72, 0x07, 0x74, 0x48, 0xef, 0x87, 0xcc, 0x6e, 0xed, 0x50, 0x82, 0xc8, 0xdb, 0xf3, 0x13, 0x65, 0xd3, 0x87, 0x2a, 0x95, 0x59, 0xa0, 0x3a, 0x73],
            [0x17, 0x23, 0xd1, 0x45, 0x2c, 0x9c, 0xf0, 0x2d, 0xf4, 0x19, 0xb8, 0x48, 0xe5, 0xd6, 0x94, 0xbf, 0x27, 0xfe, 0xba, 0x35, 0x97, 0x5e, 0xe7, 0xe5, 0x00, 0x17, 0x79, 0xe3, 0xa1, 0xd3, 0x57, 0xf4],
            [0x55, 0x7b, 0x5a, 0xf2, 0x91, 0x63, 0xa6, 0x00, 0x34, 0xec, 0x4a, 0xe1, 0xe3, 0x58, 0xe4, 0x71, 0xe1, 0x88, 0xa3, 0x98, 0x28, 0x80, 0x14, 0xf1, 0x74, 0x79, 0x06, 0x44, 0x90, 0x58, 0x07, 0x7a],
            [0x17, 0x39, 0xd1, 0x80, 0xa1, 0x60, 0x10, 0xbd, 0xfc, 0xc0, 0x57, 0x3d, 0x7e, 0x61, 0x36, 0x94, 0x21, 0xc3, 0xf7, 0x76, 0xf5, 0x72, 0x83, 0x6d, 0x9d, 0xab, 0x1e, 0xe4, 0xdc, 0xf9, 0x66, 0x22],
            [0x2d, 0x4e, 0x63, 0x54, 0xda, 0x9c, 0xc5, 0x54, 0xac, 0xce, 0x32, 0x39, 0x17, 0x94, 0xb6, 0x27, 0xfa, 0xfa, 0x96, 0xfb, 0xeb, 0x0a, 0xb8, 0x93, 0x70, 0x29, 0x04, 0x52, 0x04, 0x2d, 0x04, 0x8d],
            [0x15, 0x3e, 0xe6, 0x14, 0x2e, 0x53, 0x5e, 0x33, 0x4a, 0x86, 0x95, 0x53, 0xc9, 0xd0, 0x07, 0xf8, 0x8f, 0x3b, 0xd4, 0x3f, 0x99, 0x26, 0x06, 0x21, 0x67, 0x0b, 0xcf, 0x6f, 0x8b, 0x48, 0x5d, 0xcd],
            [0x71, 0x77, 0x3e, 0x86, 0xc8, 0x06, 0x83, 0x3f, 0x82, 0x7f, 0x65, 0x4f, 0x2c, 0x5a, 0x7a, 0xb5, 0xad, 0x19, 0x35, 0xdc, 0x98, 0xe0, 0x86, 0x79, 0x7a, 0xae, 0x75, 0x0c, 0x35, 0xaf, 0xcc, 0xb6],
            [0x0c, 0x45, 0xbf, 0xd3, 0xa6, 0x9a, 0xaa, 0x65, 0x63, 0x5e, 0xf7, 0xe7, 0xa4, 0x30, 0xb4, 0x86, 0x96, 0x8a, 0xd4, 0x42, 0x4a, 0xf8, 0x37, 0x00, 0xd2, 0x58, 0xd2, 0xe2, 0xb7, 0x78, 0x21, 0x72],
            [0x0a, 0xdf, 0xd5, 0x3b, 0x25, 0x6a, 0x69, 0x57, 0xf2, 0xd5, 0x6a, 0xec, 0x83, 0x14, 0x46, 0x00, 0x68, 0x97, 0xac, 0x0a, 0x8f, 0xfa, 0x5f, 0xf1, 0x0e, 0x56, 0x33, 0xd2, 0x51, 0xf7, 0x33, 0x07],
            [0x41, 0xd5, 0x20, 0x90, 0xea, 0x5b, 0x43, 0x40, 0x2b, 0x1a, 0x9a, 0xdf, 0xd5, 0xe2, 0xf5, 0xf2, 0xf1, 0xd1, 0xdc, 0x75, 0x25, 0x9d, 0x25, 0x22, 0x9d, 0x2f, 0xb8, 0x8e, 0xae, 0x08, 0x7a, 0x1f],
            [0x4e, 0xcd, 0xf5, 0x5b, 0xd3, 0x6d, 0x42, 0x3a, 0x33, 0x4e, 0xcd, 0x13, 0xf7, 0x2e, 0x69, 0xbd, 0x4d, 0x93, 0xd1, 0x2c, 0xbb, 0x53, 0xa1, 0x0f, 0xc0, 0xba, 0x7f, 0x3e, 0x9e, 0xc3, 0x96, 0xf1],
            [0x31, 0x5d, 0x2a, 0xc8, 0xeb, 0xdb, 0xac, 0x3c, 0x8c, 0xd1, 0x72, 0x6b, 0x7c, 0xba, 0xb8, 0xee, 0x3f, 0x87, 0xb2, 0x8f, 0x1c, 0x1b, 0xe4, 0xbd, 0xac, 0x9d, 0x36, 0xa8, 0xb7, 0x51, 0x6d, 0x63],
            [0x49, 0x26, 0x1a, 0x5d, 0x6c, 0xfd, 0x4a, 0x9f, 0x2a, 0x05, 0x1d, 0x99, 0x06, 0x06, 0x6d, 0x04, 0xa2, 0x17, 0x09, 0xc9, 0x41, 0x1c, 0xee, 0x63, 0xcc, 0x01, 0x55, 0x62, 0xc9, 0x22, 0x64, 0x32],
            [0x40, 0x15, 0x32, 0x34, 0xda, 0x11, 0x47, 0x23, 0x04, 0x8f, 0x6d, 0xcb, 0x7b, 0x69, 0x5b, 0x69, 0xf7, 0xa7, 0xcf, 0xca, 0x05, 0x2f, 0xf5, 0x15, 0x26, 0xf3, 0x89, 0x8c, 0xce, 0x33, 0x78, 0x17],
            [0x6e, 0x98, 0x6d, 0x06, 0x3d, 0x9f, 0xff, 0xc8, 0x12, 0x1b, 0xc3, 0xc2, 0xc4, 0xac, 0x3e, 0x76, 0xcf, 0x80, 0x8c, 0xef, 0xbe, 0xcc, 0xb1, 0xbd, 0xd3, 0xc0, 0xd6, 0x47, 0x38, 0xf6, 0x1b, 0xad],
            [0x52, 0x83, 0xf8, 0x0e, 0x81, 0xfc, 0x4e, 0x4d, 0x1c, 0x24, 0xa4, 0xcb, 0xc7, 0x69, 0x38, 0x94, 0xee, 0xc4, 0x52, 0xee, 0xdf, 0x44, 0x87, 0x1d, 0xe8, 0xf6, 0x75, 0x34, 0xca, 0x27, 0x39, 0x48],
            [0x55, 0x25, 0x76, 0x88, 0x74, 0x91, 0xb0, 0x6d, 0x69, 0xae, 0xf8, 0xaa, 0xc5, 0x71, 0x0e, 0x8d, 0x84, 0x4f, 0x89, 0x69, 0x57, 0xa4, 0x19, 0x21, 0xb1, 0x2a, 0x06, 0x62, 0x74, 0xc5, 0xa3, 0xf4],
            [0x59, 0x33, 0x2d, 0xc7, 0x61, 0xe3, 0xad, 0x27, 0x50, 0x48, 0xa1, 0x19, 0x8b, 0x73, 0xd5, 0xc3, 0xa9, 0x9b, 0xa7, 0x5b, 0x7b, 0x7e, 0x59, 0x95, 0x37, 0x83, 0x38, 0xdf, 0x48, 0xd6, 0xe3, 0x98],
            [0x1b, 0x84, 0x72, 0x71, 0x2d, 0x02, 0xee, 0xf4, 0xcf, 0xae, 0xc2, 0x3d, 0x2b, 0x16, 0x88, 0x3f, 0xc9, 0xbb, 0x60, 0xd1, 0xf6, 0x95, 0x98, 0x79, 0x29, 0x9c, 0xe4, 0x4e, 0xa4, 0x23, 0xd8, 0xe1],
            [0x49, 0x45, 0xc4, 0xc7, 0xc6, 0x22, 0x82, 0xf0, 0x8e, 0x36, 0xb5, 0x9a, 0xb0, 0xe3, 0x30, 0x01, 0x75, 0x9e, 0x70, 0xe0, 0x12, 0x21, 0xc7, 0x4d, 0x55, 0x05, 0x58, 0x6a, 0xe9, 0x5e, 0xab, 0x68],
            [0x6f, 0x7d, 0x34, 0xb9, 0x19, 0x9b, 0xf6, 0x0a, 0x87, 0xb4, 0xb0, 0x65, 0x39, 0xa1, 0x55, 0x4c, 0x41, 0x3b, 0xd0, 0x7c, 0x74, 0x30, 0xf7, 0xa5, 0x4c, 0x01, 0x76, 0xc9, 0x4c, 0x1b, 0x9e, 0x95],
            [0x3c, 0x1c, 0xd0, 0x7e, 0xfd, 0xa6, 0xff, 0x24, 0xbd, 0x0b, 0x70, 0xfa, 0x22, 0x55, 0xeb, 0x6f, 0x36, 0x7d, 0x2c, 0x54, 0xe3, 0x69, 0x28, 0xc9, 0xc4, 0xa5, 0x40, 0x41, 0x98, 0xad, 0xf7, 0x0c],
            [0x72, 0xed, 0x85, 0x7f, 0xbb, 0x58, 0x1d, 0x2d, 0x92, 0x93, 0x29, 0x95, 0xe8, 0x01, 0x88, 0xc7, 0xad, 0x9e, 0xb5, 0xc8, 0xc0, 0x84, 0xd5, 0xd8, 0x29, 0x39, 0x48, 0x41, 0x27, 0x4c, 0x91, 0xd2],
            [0x13, 0x60, 0x52, 0xd2, 0x6b, 0xb3, 0xd3, 0x73, 0x68, 0x7f, 0x4e, 0x51, 0xb2, 0xe1, 0xdc, 0xd3, 0x4a, 0x16, 0x07, 0x3f, 0x73, 0x8f, 0x7e, 0x0c, 0xbb, 0xe5, 0x23, 0xae, 0xf9, 0xab, 0x10, 0x7a],
            [0x62, 0x3f, 0x02, 0xec, 0x81, 0x87, 0x92, 0x94, 0x1c, 0x48, 0x94, 0x43, 0x88, 0x41, 0xd4, 0x41, 0x65, 0x3e, 0xc1, 0xe7, 0x60, 0xcc, 0x09, 0xf5, 0xad, 0x10, 0x2f, 0x01, 0x4b, 0x66, 0x58, 0xc7],
            [0x51, 0xc0, 0xb9, 0xb1, 0x02, 0x2d, 0xe4, 0xd0, 0xfe, 0xa7, 0xad, 0x49, 0xbf, 0x6d, 0x81, 0x4d, 0xed, 0x95, 0x41, 0x80, 0x7d, 0xf5, 0xa9, 0x11, 0x58, 0x95, 0x83, 0xba, 0x65, 0x8d, 0x43, 0x48],
            [0x42, 0xc1, 0xe8, 0x1b, 0x61, 0xb7, 0xfc, 0x0b, 0x04, 0xb4, 0x80, 0x24, 0xc5, 0x6f, 0x83, 0x10, 0x8d, 0xc8, 0x00, 0x17, 0x9c, 0xa7, 0x53, 0x08, 0x68, 0x72, 0x4e, 0xc3, 0x23, 0x9f, 0x84, 0x63],
            [0x42, 0xce, 0x8d, 0x45, 0xe3, 0xf7, 0xbb, 0xf7, 0xf1, 0x0a, 0x8f, 0xc7, 0x1a, 0xb6, 0xd7, 0xc3, 0x0b, 0xcf, 0x84, 0x38, 0x97, 0xbc, 0x68, 0x23, 0x20, 0x82, 0x02, 0xd2, 0xe3, 0x1f, 0xd0, 0x72],
            [0x6e, 0x53, 0xbf, 0xc3, 0xec, 0x7b, 0xe3, 0x9c, 0x06, 0x4e, 0x2f, 0x0f, 0xde, 0xe7, 0xa3, 0x7b, 0x0b, 0x93, 0x96, 0x57, 0x12, 0xe4, 0x31, 0x39, 0x4b, 0xcc, 0xe9, 0xc7, 0x5c, 0x22, 0xf7, 0x38],
            [0x16, 0xc9, 0x6b, 0xee, 0xf6, 0xa0, 0xa8, 0x48, 0xc1, 0xbd, 0xd8, 0x59, 0xa1, 0x23, 0x2a, 0x1d, 0x7b, 0x3c, 0xfb, 0xb8, 0x73, 0x03, 0x26, 0x81, 0x67, 0x6c, 0x36, 0xc2, 0x4e, 0xf9, 0x67, 0xdd],
            [0x28, 0x4b, 0x38, 0xc5, 0x7f, 0xf6, 0x5c, 0x26, 0x2a, 0xb7, 0xfe, 0xd8, 0xf4, 0x99, 0xa9, 0xfb, 0x01, 0x23, 0x87, 0xba, 0xb4, 0xf1, 0x66, 0x2d, 0x06, 0x7e, 0xec, 0x7f, 0x2d, 0x63, 0x40, 0xc4],
            [0x70, 0xcb, 0x7a, 0xd7, 0x79, 0x8e, 0x30, 0x7e, 0xf8, 0x5d, 0x4b, 0xdf, 0xc7, 0x6f, 0x83, 0x74, 0x20, 0xea, 0x23, 0xa9, 0xfe, 0x16, 0x27, 0x3d, 0x60, 0xbf, 0xc6, 0xce, 0xbe, 0xbb, 0x5a, 0xc1],
            [0x0c, 0x59, 0x93, 0xd1, 0x75, 0xe8, 0x1f, 0x66, 0x39, 0xe2, 0x42, 0x19, 0x88, 0x97, 0xd1, 0x7c, 0xfc, 0x06, 0x77, 0x2c, 0x1c, 0x04, 0x11, 0xa6, 0xaf, 0x1d, 0xff, 0x20, 0x4c, 0x92, 0x2f, 0x86],
            [0x03, 0xbf, 0x7a, 0x3f, 0x7b, 0xd0, 0x43, 0xda, 0xfc, 0xda, 0x65, 0x5d, 0x1b, 0xa9, 0xc8, 0xf9, 0xf2, 0x48, 0x87, 0xad, 0x48, 0xe1, 0x77, 0x59, 0xbb, 0xf5, 0x3f, 0x67, 0xb1, 0xf8, 0x7b, 0x15],
            [0x31, 0x88, 0xfe, 0x4e, 0xe9, 0xf9, 0xfa, 0xfb, 0xb0, 0xcf, 0x99, 0x95, 0x67, 0xf0, 0x0e, 0x73, 0x4c, 0x8f, 0x9c, 0xbe, 0x69, 0xf0, 0xe8, 0x27, 0x9b, 0x5c, 0xd0, 0x9e, 0x36, 0xd8, 0xbe, 0x62],
            [0x17, 0x1f, 0x52, 0x8c, 0xcf, 0x65, 0x84, 0x37, 0x5a, 0x39, 0x76, 0x8c, 0x48, 0x0d, 0x61, 0xe1, 0x3a, 0xf5, 0xbf, 0x77, 0xc1, 0xc4, 0x26, 0x52, 0xaf, 0xea, 0x99, 0xa2, 0xec, 0x6c, 0x59, 0x5a],
            [0x12, 0xf4, 0x17, 0x5c, 0x4a, 0xb4, 0x5a, 0xfc, 0x19, 0x6e, 0x41, 0x85, 0x9b, 0x35, 0xef, 0x88, 0x81, 0x2c, 0x32, 0x86, 0xee, 0x70, 0x00, 0x67, 0x5a, 0x05, 0x63, 0xb9, 0xb8, 0xe9, 0xf1, 0xd5],
            [0x3a, 0x50, 0x9e, 0x15, 0x5c, 0xb7, 0xeb, 0xfd, 0x8f, 0x8f, 0xdc, 0xf8, 0x00, 0xa9, 0xac, 0x69, 0x7e, 0x23, 0xe1, 0xaa, 0xbe, 0x96, 0xcf, 0xab, 0x0e, 0x74, 0xd4, 0xd3, 0x69, 0x11, 0x8b, 0x79],
            [0x10, 0xf2, 0xa6, 0x85, 0xdf, 0x4a, 0x27, 0xc8, 0x1a, 0x89, 0x92, 0x0e, 0x25, 0x04, 0xc3, 0xb3, 0x98, 0x4b, 0xc8, 0xf2, 0xe4, 0xc1, 0xb6, 0x9e, 0x98, 0x71, 0x2c, 0x65, 0x67, 0x8c, 0xfd, 0x30],
            [0x49, 0x59, 0x04, 0x3e, 0x21, 0x35, 0xe0, 0x38, 0x9e, 0xd8, 0xc6, 0xf8, 0x11, 0x04, 0xcb, 0x63, 0x90, 0xaf, 0x37, 0xd6, 0x16, 0x01, 0x5a, 0x88, 0x1e, 0xd3, 0x36, 0x34, 0x04, 0x68, 0x7f, 0x05],
            [0x52, 0xbd, 0x40, 0x73, 0xf5, 0xf9, 0x00, 0x44, 0x82, 0x62, 0xe3, 0x71, 0xdb, 0xaf, 0xcb, 0xba, 0x1e, 0xdc, 0x15, 0x5f, 0x03, 0xbf, 0x7f, 0x87, 0x1c, 0x47, 0xf0, 0x8d, 0xae, 0x05, 0xfd, 0xdd],
            [0x09, 0xe5, 0xf4, 0x97, 0x90, 0xc8, 0xa0, 0xe2, 0x1d, 0x8d, 0x93, 0xd5, 0x4a, 0xb9, 0x1a, 0x0e, 0x54, 0x57, 0x3c, 0x93, 0x33, 0xc5, 0x63, 0x21, 0xe8, 0xa1, 0x67, 0x28, 0xcc, 0x9d, 0x49, 0x18],
            [0x35, 0x2d, 0x69, 0xbe, 0xd8, 0x0e, 0xe3, 0xe5, 0x2b, 0xf3, 0x57, 0x05, 0xd9, 0xf8, 0x4a, 0x34, 0x42, 0xd1, 0x7e, 0xd6, 0xee, 0x0f, 0xab, 0x7e, 0x60, 0x9a, 0x74, 0x03, 0x47, 0xcf, 0x5f, 0xea],
            [0x05, 0x8e, 0xe7, 0x3b, 0xa9, 0xf3, 0xf2, 0x93, 0x49, 0x15, 0x62, 0xfa, 0xf2, 0xb1, 0x90, 0xd3, 0xc6, 0x34, 0xde, 0xbd, 0x28, 0x1b, 0x76, 0xa6, 0x3a, 0x75, 0x8a, 0xf6, 0xfa, 0x84, 0xe0, 0xe8],
            [0x61, 0x84, 0xc2, 0x23, 0x12, 0x4d, 0x65, 0x8c, 0xd4, 0x76, 0x0a, 0xb3, 0xc3, 0xb9, 0x66, 0x89, 0x47, 0xb1, 0x2f, 0x27, 0x94, 0x37, 0xcc, 0xd3, 0x75, 0xef, 0x85, 0x5b, 0x3d, 0x99, 0x97, 0x98],
            [0x6e, 0xa9, 0x89, 0xc6, 0x3c, 0x45, 0x13, 0x41, 0xc9, 0x1a, 0xfa, 0x79, 0x0b, 0x6f, 0x84, 0xc0, 0xff, 0xf8, 0xd0, 0x96, 0x80, 0x34, 0x4b, 0xc7, 0x43, 0x49, 0x98, 0xdf, 0xc6, 0x96, 0xc1, 0x15],
            [0x57, 0xf4, 0xac, 0x04, 0x5f, 0xb7, 0x8a, 0xde, 0x81, 0xf9, 0x19, 0x6c, 0x9d, 0xb8, 0xa7, 0xab, 0xf8, 0xde, 0x13, 0x9c, 0x4a, 0x48, 0x8a, 0x06, 0x13, 0x68, 0x59, 0x82, 0xe8, 0x12, 0x18, 0x12],
            [0x6d, 0xbf, 0xdc, 0x64, 0xa5, 0x45, 0x23, 0x7a, 0x88, 0xee, 0x79, 0xc1, 0x75, 0x2a, 0x74, 0xce, 0x76, 0x73, 0x52, 0xb5, 0x07, 0x1a, 0x0d, 0x31, 0x7c, 0x5b, 0x49, 0xe2, 0x59, 0x49, 0x1b, 0x94],
            [0x23, 0x2f, 0x99, 0xcc, 0x91, 0x1e, 0xdd, 0xd9, 0xcd, 0x0f, 0x1f, 0xc5, 0x5b, 0x1a, 0x32, 0x50, 0x09, 0x2c, 0xb9, 0x21, 0x19, 0xbc, 0x76, 0xbe, 0x62, 0x1a, 0x13, 0x25, 0x10, 0xa4, 0x39, 0x04],
            [0x20, 0x1b, 0xee, 0xd7, 0xb8, 0xf3, 0xab, 0x81, 0x86, 0xc2, 0x2c, 0x6c, 0x5d, 0x48, 0x69, 0xf0, 0xf9, 0xef, 0xd5, 0x2c, 0xa6, 0xbc, 0x29, 0x61, 0xc3, 0xb9, 0x7c, 0x1e, 0x30, 0x1b, 0xc2, 0x13],
            [0x4b, 0x99, 0xc7, 0x56, 0xe1, 0xe0, 0xb9, 0x49, 0x1a, 0x08, 0x2e, 0x28, 0xc5, 0x54, 0x58, 0xcc, 0xd5, 0xe9, 0x7e, 0xb5, 0x93, 0x81, 0xfc, 0x87, 0x22, 0x23, 0xd9, 0xe7, 0x7e, 0xf8, 0x7b, 0x2d],
            [0x13, 0x76, 0xdc, 0xe6, 0x58, 0x00, 0x30, 0xc6, 0xa1, 0xc9, 0x29, 0x1d, 0x58, 0x60, 0x2f, 0x51, 0x29, 0x38, 0x88, 0x42, 0x74, 0x4a, 0x12, 0x10, 0xbf, 0x6b, 0x34, 0x31, 0xba, 0x94, 0xe9, 0xbc],
            [0x17, 0x93, 0x19, 0x9e, 0x6f, 0xd6, 0xba, 0x34, 0x2b, 0x33, 0x56, 0xc3, 0x82, 0x38, 0xf7, 0x61, 0x07, 0x2b, 0xa8, 0xb0, 0x2d, 0x92, 0xe7, 0x22, 0x64, 0x54, 0x84, 0x3c, 0x54, 0x86, 0xd7, 0xb3],
            [0x50, 0x48, 0x85, 0x7b, 0x88, 0x72, 0xcc, 0x1d, 0xe1, 0x88, 0x94, 0x7d, 0xc3, 0xee, 0x98, 0x4e, 0x21, 0x7d, 0x26, 0x4c, 0x79, 0x75, 0x25, 0x6f, 0xbf, 0xc7, 0x4c, 0x87, 0x21, 0x47, 0x2d, 0x98],
            [0x5c, 0x77, 0x2c, 0x20, 0xfc, 0x28, 0x5d, 0x3e, 0x18, 0x54, 0xe3, 0xed, 0xed, 0xdd, 0x52, 0x94, 0x2c, 0xd9, 0xb6, 0x1c, 0x77, 0x55, 0xfe, 0x46, 0xda, 0xde, 0x9f, 0x89, 0xde, 0x8b, 0x3b, 0xbf],
            [0x6e, 0x40, 0xd5, 0x18, 0xae, 0x3c, 0xe6, 0xca, 0xd0, 0x92, 0xe8, 0x10, 0x90, 0x9a, 0x91, 0x6c, 0x60, 0xfe, 0x77, 0xdf, 0xe7, 0xbb, 0xb8, 0x6b, 0x5b, 0xfc, 0xce, 0xba, 0x1a, 0xe1, 0x88, 0x79],
            [0x22, 0xde, 0x7a, 0x74, 0x88, 0xdc, 0xc7, 0x35, 0x9f, 0xee, 0x9c, 0x20, 0xc8, 0x7a, 0x67, 0xdf, 0x3c, 0x66, 0x16, 0x0d, 0xc6, 0x2a, 0xac, 0xac, 0x06, 0xa3, 0xf1, 0xd3, 0xb4, 0x33, 0x31, 0x1b],
            [0x35, 0x14, 0xd5, 0xe9, 0x06, 0x6b, 0xb1, 0x60, 0xdf, 0x8f, 0xf3, 0x7f, 0xe2, 0xd8, 0xed, 0xf8, 0xdb, 0xe0, 0xb7, 0x7f, 0xae, 0x77, 0xe1, 0xd0, 0x30, 0xd6, 0xe3, 0xfd, 0x51, 0x6b, 0x47, 0xa8],
            [0x30, 0xcd, 0x30, 0x06, 0x93, 0x1a, 0xd6, 0x36, 0xf9, 0x19, 0xa0, 0x0d, 0xab, 0xbf, 0x5f, 0xa5, 0xff, 0x45, 0x3d, 0x6f, 0x90, 0x0f, 0x14, 0x4a, 0x19, 0x37, 0x74, 0x27, 0x13, 0x7a, 0x81, 0xc7],
            [0x62, 0x03, 0xad, 0x60, 0xb0, 0x34, 0x1b, 0xaa, 0x14, 0xe5, 0xc4, 0x8b, 0x91, 0x5f, 0x6b, 0x41, 0xe4, 0x95, 0x98, 0x35, 0xd1, 0xa8, 0x39, 0x99, 0x6d, 0xcf, 0xc3, 0x78, 0xb6, 0x62, 0xc4, 0x74],
            [0x71, 0xe8, 0xd0, 0xac, 0x03, 0x5e, 0x59, 0xbf, 0x80, 0x07, 0xc0, 0xf3, 0xaf, 0x24, 0xde, 0x07, 0xb6, 0x74, 0xda, 0xe7, 0x70, 0x42, 0xae, 0x7d, 0xce, 0x7a, 0xe9, 0x47, 0x70, 0xd7, 0x62, 0x54],
            [0x25, 0x3d, 0x1a, 0x5c, 0x52, 0x93, 0x41, 0x27, 0x41, 0xf8, 0x1a, 0x5c, 0xf6, 0x13, 0xc8, 0xdf, 0x8f, 0x9e, 0x4b, 0x2c, 0xae, 0x2e, 0xbb, 0x51, 0x5b, 0x6a, 0x74, 0x22, 0x06, 0x92, 0xb5, 0x06],
            [0x03, 0x5b, 0x46, 0x1c, 0x02, 0xd7, 0x9d, 0x19, 0xa3, 0x5e, 0x96, 0x13, 0xe7, 0xf5, 0xfe, 0x92, 0x85, 0x1b, 0x3a, 0x59, 0xc9, 0x90, 0xfa, 0xfc, 0x73, 0xf6, 0x66, 0xcb, 0x86, 0xa4, 0x8e, 0x8e],
            [0x44, 0x47, 0x68, 0x86, 0xa8, 0xf1, 0x0f, 0x58, 0x98, 0x00, 0xc8, 0xe3, 0x95, 0x6f, 0x5f, 0x26, 0x64, 0x8d, 0xa4, 0xde, 0x0e, 0x86, 0xf1, 0x9d, 0x35, 0xb3, 0x34, 0x97, 0x7c, 0x0f, 0xec, 0xc5],
            [0x23, 0xa9, 0x92, 0x80, 0x79, 0xd1, 0x75, 0xbd, 0x5b, 0xc0, 0x0e, 0xed, 0xd5, 0x6b, 0x93, 0xe0, 0x92, 0xb1, 0x28, 0x3c, 0x2d, 0x5f, 0xcc, 0xde, 0x7c, 0xfb, 0xf8, 0x6a, 0x3a, 0xa0, 0x47, 0x80],
            [0x13, 0xa7, 0x78, 0x5a, 0xe1, 0x34, 0xea, 0x92, 0xf1, 0x59, 0x4a, 0x07, 0x63, 0xc6, 0x11, 0xab, 0xb5, 0xe2, 0xea, 0x34, 0x36, 0xee, 0xf9, 0x57, 0xf1, 0xe4, 0xcc, 0xd7, 0x3f, 0xa0, 0x0a, 0x82],
            [0x39, 0xfc, 0xe3, 0x08, 0xb7, 0xd4, 0x3c, 0x57, 0x49, 0x62, 0xae, 0x3c, 0x0d, 0xa1, 0x7e, 0x31, 0x38, 0x89, 0xc5, 0x78, 0x63, 0x44, 0x6d, 0x88, 0xbb, 0xf0, 0x4f, 0x52, 0x52, 0xde, 0x42, 0x79],
            [0x1a, 0xae, 0x18, 0x83, 0x3f, 0x8e, 0x1d, 0x3a, 0xc0, 0xfd, 0xf0, 0x16, 0x62, 0xf6, 0x0d, 0x22, 0xbe, 0xf0, 0x0a, 0x08, 0xc6, 0xed, 0x38, 0xd2, 0x3b, 0x57, 0xe3, 0x44, 0x89, 0xb5, 0x3f, 0xad],
            [0x1a, 0x76, 0x1c, 0xe8, 0x24, 0x00, 0xaf, 0x01, 0x8b, 0x2e, 0x80, 0xc0, 0x64, 0xfd, 0x83, 0xed, 0x27, 0xc1, 0xb3, 0xfd, 0x8f, 0x85, 0xd8, 0xa8, 0x55, 0x51, 0x3e, 0x03, 0x33, 0x98, 0x51, 0x3f],
            [0x64, 0xdf, 0x4c, 0x0e, 0xcc, 0x13, 0x2a, 0x1e, 0xbf, 0x55, 0x3c, 0xf3, 0x34, 0xd8, 0x8e, 0xd8, 0xa7, 0xef, 0x1e, 0xc4, 0x87, 0x82, 0x10, 0x05, 0xa4, 0xe3, 0x85, 0xd6, 0xfa, 0xe1, 0x79, 0xf0],
            [0x47, 0x94, 0x0c, 0x32, 0x59, 0x98, 0x22, 0xd6, 0x78, 0x97, 0xc4, 0x06, 0x26, 0x65, 0xe1, 0x56, 0x87, 0x22, 0x0d, 0x2c, 0x5c, 0xe5, 0x71, 0x3c, 0xa1, 0xae, 0x44, 0xcd, 0xbf, 0x45, 0x21, 0x41],
            [0x27, 0x5a, 0x03, 0xe4, 0x5a, 0xdd, 0xa7, 0xc3, 0x16, 0xdd, 0x1a, 0x87, 0xca, 0x22, 0xe1, 0xcc, 0xdc, 0xf6, 0xaf, 0x28, 0x30, 0xa5, 0x02, 0x87, 0x52, 0x44, 0xca, 0x74, 0x9b, 0x73, 0xe4, 0x81],
            [0x2e, 0x5a, 0x10, 0xf0, 0x8b, 0x5a, 0xb8, 0xbb, 0xeb, 0x08, 0xe4, 0x7e, 0x5f, 0xea, 0xbc, 0xf8, 0x07, 0xe5, 0x61, 0x45, 0x3f, 0xc5, 0x64, 0x8b, 0x58, 0xa2, 0x53, 0xcf, 0xb6, 0xa9, 0x57, 0x86],
            [0x6b, 0x42, 0x16, 0xc7, 0x6c, 0x22, 0x99, 0x46, 0xeb, 0xa0, 0xb6, 0xca, 0x56, 0x7a, 0x5e, 0x01, 0xef, 0xef, 0x19, 0x19, 0xcd, 0x34, 0x24, 0xa1, 0x61, 0x47, 0x7b, 0xd2, 0xd2, 0xcd, 0xf3, 0x0d],
            [0x14, 0x59, 0xcb, 0x85, 0x87, 0x20, 0x84, 0x73, 0xb8, 0x4e, 0x9c, 0x33, 0x3b, 0x29, 0x32, 0xf1, 0xc1, 0x41, 0xa5, 0xb6, 0xd5, 0x94, 0xbe, 0xc4, 0xe0, 0x33, 0xd8, 0x2c, 0xef, 0xe7, 0x8c, 0xe3],
            [0x19, 0x3a, 0xe5, 0x92, 0x1d, 0x78, 0xb5, 0xde, 0x7b, 0x92, 0xce, 0x81, 0x0e, 0x14, 0xa4, 0x00, 0x52, 0xf9, 0x33, 0x2f, 0xbf, 0xfc, 0xfb, 0xbd, 0x5c, 0xec, 0x7e, 0x7b, 0x33, 0x8f, 0xbe, 0x1b],
            [0x30, 0x97, 0x89, 0x8a, 0x5d, 0x00, 0x11, 0xa4, 0x89, 0x11, 0x1f, 0xb2, 0xc4, 0x66, 0x02, 0x81, 0x37, 0x43, 0x84, 0xf4, 0xa0, 0x72, 0x82, 0x05, 0x60, 0x22, 0x4b, 0xe6, 0x72, 0x48, 0xe8, 0x2c],
            [0x37, 0x8d, 0x97, 0xbf, 0x8c, 0x86, 0x4a, 0xe7, 0x57, 0x17, 0x82, 0xfd, 0x96, 0xce, 0x54, 0xb4, 0x19, 0x79, 0xb2, 0xd1, 0xc4, 0x65, 0xb4, 0xd9, 0x54, 0x99, 0x80, 0xde, 0x86, 0x29, 0x30, 0xf5],
            [0x47, 0xe9, 0x39, 0x59, 0x09, 0x28, 0x51, 0x3a, 0xae, 0xa5, 0xca, 0x5f, 0xda, 0x89, 0x8a, 0x41, 0x73, 0x43, 0x78, 0xea, 0xbc, 0xda, 0x9b, 0x48, 0xad, 0xc3, 0x5c, 0xe0, 0x3f, 0x59, 0xd0, 0x8e],
            [0x2e, 0xb0, 0x4e, 0xa7, 0xc0, 0x1d, 0x97, 0xec, 0x88, 0x13, 0x62, 0x87, 0xce, 0x37, 0x6b, 0x08, 0xdb, 0xc7, 0xf5, 0xcb, 0x46, 0x09, 0x34, 0x21, 0x37, 0xea, 0x32, 0xa9, 0x71, 0xd1, 0x78, 0x84],
            [0x66, 0x8a, 0x95, 0xbd, 0xdf, 0xb8, 0x78, 0x73, 0x2b, 0xe2, 0x63, 0x3a, 0xda, 0x54, 0x1e, 0x1d, 0x1e, 0x16, 0x34, 0x18, 0xf3, 0xeb, 0xf8, 0x23, 0x16, 0xf6, 0x4b, 0x24, 0xab, 0x49, 0xcf, 0x05],
            [0x57, 0xff, 0x77, 0xff, 0xd3, 0xab, 0x33, 0x72, 0x98, 0x5f, 0x83, 0x9e, 0x7c, 0xd6, 0x1f, 0xae, 0x62, 0x8a, 0x68, 0x3f, 0x22, 0xab, 0x24, 0x52, 0x56, 0x26, 0x0a, 0x46, 0xba, 0x14, 0xb2, 0x6d],
            [0x4e, 0x18, 0x53, 0x28, 0xf8, 0x22, 0x83, 0x71, 0xb8, 0x95, 0x7c, 0x49, 0x63, 0x16, 0xb4, 0xfc, 0xfd, 0x3c, 0x17, 0x86, 0xce, 0xc9, 0xa1, 0xb8, 0xf8, 0x55, 0xed, 0xd2, 0x75, 0x97, 0xe7, 0xaf],
            [0x36, 0x42, 0x53, 0x47, 0xea, 0x03, 0xf6, 0x41, 0x23, 0x02, 0xa1, 0xc2, 0x2e, 0x49, 0xba, 0xec, 0x86, 0x1c, 0xbd, 0xa4, 0x76, 0x80, 0x4e, 0x6c, 0xea, 0xd3, 0x72, 0x6f, 0x1a, 0xf2, 0xe7, 0xb0],
            [0x51, 0xb8, 0x25, 0xd3, 0x3b, 0x31, 0xb0, 0x18, 0xca, 0x3d, 0x35, 0x90, 0xdc, 0xc9, 0xca, 0x41, 0xaf, 0xe0, 0x9f, 0x69, 0x91, 0x91, 0xc4, 0x1a, 0xcd, 0xb5, 0xb3, 0xef, 0x7e, 0x61, 0x7b, 0x78],
            [0x26, 0xb7, 0x2d, 0xf4, 0x74, 0x08, 0xad, 0x42, 0xcc, 0x99, 0x6c, 0xd8, 0x5c, 0x98, 0xa1, 0xd8, 0x3f, 0x5b, 0x5c, 0xa5, 0xa1, 0x9a, 0x97, 0x01, 0xec, 0xd6, 0x27, 0xe5, 0x95, 0x90, 0xd0, 0x9e],
            [0x62, 0x9f, 0x82, 0xef, 0x3b, 0x84, 0x3d, 0x15, 0xe5, 0xe6, 0x7f, 0xba, 0xb2, 0x85, 0x7f, 0x76, 0x65, 0xe3, 0x9a, 0x22, 0x89, 0xdf, 0x75, 0x6e, 0xf8, 0x2e, 0xda, 0x0e, 0x3b, 0xae, 0xf8, 0x2d],
            [0x57, 0xda, 0x05, 0xc9, 0xa9, 0x59, 0x02, 0xae, 0xa1, 0xb8, 0x04, 0xe4, 0x93, 0xea, 0x27, 0xd6, 0x61, 0xa3, 0x6e, 0x5b, 0xd6, 0x30, 0xfb, 0xc5, 0xb2, 0x56, 0x5b, 0x42, 0xc8, 0x16, 0x78, 0xdf],
            [0x65, 0xbb, 0x18, 0x5a, 0xa2, 0x2d, 0x4a, 0x6d, 0x0b, 0x97, 0x41, 0xe9, 0x36, 0xb9, 0x55, 0xbc, 0x63, 0x22, 0xfb, 0x74, 0x9f, 0x73, 0xc9, 0xe9, 0x54, 0x66, 0x74, 0x7c, 0xa7, 0xd7, 0x9d, 0xec],
            [0x13, 0x01, 0x80, 0xe4, 0x4e, 0x29, 0x24, 0xdb, 0x1f, 0x05, 0x63, 0x6c, 0x61, 0x0b, 0x89, 0xaa, 0xde, 0x01, 0x21, 0x2e, 0xe4, 0x58, 0x8f, 0x89, 0x59, 0xbe, 0xce, 0x31, 0xf0, 0xa3, 0x1e, 0x95],
            [0x21, 0x9e, 0x97, 0x73, 0x7d, 0x39, 0x79, 0xba, 0x73, 0x27, 0x5a, 0xca, 0xed, 0x5f, 0x57, 0x9c, 0xdf, 0x77, 0x93, 0xcc, 0x89, 0xe5, 0xb5, 0x2f, 0x9e, 0xa8, 0xe7, 0xbc, 0x79, 0x26, 0x35, 0x50],
            [0x40, 0x43, 0xfd, 0x30, 0x82, 0x57, 0x4e, 0x57, 0x73, 0xa8, 0x65, 0x4e, 0x32, 0xdd, 0x41, 0x90, 0xa6, 0x72, 0x8b, 0xe3, 0xfc, 0x54, 0xfa, 0xb3, 0x64, 0x45, 0x32, 0xe1, 0xc7, 0x9a, 0x18, 0x00],
            [0x57, 0x84, 0xe5, 0x36, 0x0f, 0xfb, 0x67, 0x81, 0xd9, 0xcb, 0xc1, 0xdf, 0x6b, 0xd8, 0x54, 0x9c, 0x71, 0xd8, 0x1f, 0x00, 0x0d, 0x5c, 0x4d, 0x2f, 0x07, 0x1d, 0xc0, 0xf2, 0x8a, 0x21, 0xc7, 0x20],
            [0x3c, 0xdb, 0x93, 0x59, 0x8a, 0x5c, 0xa5, 0x28, 0x34, 0x61, 0x36, 0x3f, 0x81, 0xc4, 0x89, 0xa2, 0x3b, 0x06, 0x72, 0xdd, 0x7d, 0x42, 0xcb, 0xb4, 0x9c, 0x12, 0x63, 0x5d, 0xf2, 0x51, 0xd1, 0x53],
            [0x0e, 0x59, 0xe6, 0xf3, 0x32, 0xd7, 0xed, 0x37, 0x20, 0x72, 0x4b, 0x92, 0x7a, 0x0c, 0xa8, 0x1c, 0x4a, 0xd0, 0x44, 0x70, 0x45, 0xa7, 0xc5, 0xaa, 0x28, 0x61, 0xce, 0x16, 0xf2, 0x19, 0xd5, 0xa9],
            [0x57, 0xaf, 0xcf, 0x06, 0x9f, 0x36, 0x80, 0xa6, 0xdd, 0xcb, 0x34, 0x24, 0xff, 0x2a, 0xb8, 0xd1, 0x38, 0xa4, 0x8f, 0x0f, 0xa7, 0x2f, 0xc0, 0x62, 0x86, 0x71, 0x8f, 0x66, 0xcf, 0xe1, 0xdf, 0x08],
            [0x51, 0xba, 0x5d, 0x48, 0x99, 0xd7, 0x83, 0x5e, 0xc1, 0xa1, 0x7f, 0xb1, 0xbc, 0x71, 0x01, 0x69, 0x08, 0x28, 0xfd, 0x09, 0xec, 0x92, 0xe7, 0x32, 0x76, 0x9a, 0x61, 0xf5, 0xf0, 0xc6, 0x60, 0x85],
            [0x1b, 0x06, 0x43, 0x42, 0xd5, 0x1a, 0x42, 0x75, 0x3d, 0x73, 0x69, 0x46, 0x72, 0x22, 0x69, 0x7a, 0x17, 0x2c, 0xc0, 0x7b, 0x9d, 0x33, 0xfb, 0xf9, 0x43, 0xb0, 0xa3, 0xfc, 0xff, 0x20, 0x36, 0xbd],
            [0x54, 0xae, 0xf4, 0x55, 0x59, 0xda, 0x8b, 0x2c, 0x74, 0x72, 0xc3, 0xad, 0x5a, 0x0d, 0x33, 0x08, 0x6d, 0xa6, 0xe4, 0xdf, 0x67, 0xef, 0x4e, 0xde, 0x87, 0x4a, 0xde, 0xbb, 0x29, 0x02, 0xdf, 0x82],
            [0x30, 0xb8, 0x2a, 0x99, 0x8c, 0xbd, 0x8e, 0x8a, 0x2f, 0x36, 0x3c, 0x55, 0xb2, 0x88, 0x2e, 0x0b, 0x78, 0xfa, 0x9f, 0xb9, 0x17, 0x12, 0x21, 0xb7, 0x3e, 0xb3, 0x10, 0x22, 0x8a, 0x0e, 0x5f, 0x6c],
            [0x52, 0x3a, 0x56, 0xf8, 0x1b, 0xa9, 0x0e, 0xf3, 0xa4, 0x0e, 0xbd, 0xf2, 0xc8, 0x48, 0xc8, 0xab, 0x1a, 0x6c, 0x98, 0x89, 0xac, 0x6c, 0x78, 0xec, 0xa8, 0x14, 0x7a, 0x56, 0x0d, 0xb3, 0x20, 0xc5],
            [0x4f, 0xc5, 0x81, 0xcc, 0x0a, 0x10, 0xb8, 0xc1, 0xd3, 0x57, 0xe2, 0x15, 0xfe, 0x5c, 0x7e, 0xc1, 0xd3, 0xa0, 0x93, 0x1c, 0xad, 0x9a, 0x57, 0x5d, 0xa6, 0x13, 0xb2, 0x82, 0xfb, 0x1f, 0xd4, 0xb4],
            [0x23, 0xe4, 0xab, 0x37, 0x18, 0x3a, 0xcb, 0xa4, 0x63, 0xdf, 0x7a, 0x76, 0xe8, 0x58, 0xa4, 0xaa, 0x8a, 0xd7, 0x1e, 0xa7, 0x15, 0xbe, 0x05, 0x73, 0xe4, 0x6f, 0x6d, 0x42, 0x98, 0x74, 0x01, 0x07],
            [0x27, 0x95, 0xd5, 0xc5, 0xfa, 0x42, 0x80, 0x22, 0x5d, 0x33, 0x09, 0x4e, 0x0b, 0xed, 0xa7, 0x5b, 0xac, 0xfe, 0x14, 0x64, 0x0d, 0xe0, 0x44, 0xf2, 0xfc, 0xa9, 0x95, 0xe2, 0xb5, 0x99, 0x14, 0xa1],
            [0x30, 0x01, 0xca, 0x40, 0x1e, 0x89, 0x60, 0x1c, 0xd7, 0x65, 0xf2, 0x6d, 0xd0, 0x3f, 0x4c, 0x45, 0xa6, 0x68, 0x7c, 0x3d, 0xf1, 0x6c, 0x8f, 0xe4, 0xc2, 0x6d, 0x90, 0x9d, 0xee, 0x8b, 0x53, 0xc0],
            [0x00, 0x72, 0xe4, 0x5c, 0xc6, 0x76, 0xb0, 0x8e, 0xf7, 0xbf, 0x86, 0xe8, 0x92, 0x80, 0x82, 0x7f, 0xe8, 0x4b, 0x5b, 0xeb, 0xae, 0x4e, 0x50, 0x1d, 0xe7, 0xfe, 0xa6, 0xbd, 0xf3, 0x47, 0x13, 0x80],
            [0x52, 0x23, 0x38, 0xe1, 0xbf, 0x86, 0x1c, 0x22, 0xcf, 0x8e, 0xea, 0xa5, 0xd0, 0x60, 0xdb, 0x37, 0x42, 0x0d, 0x30, 0x20, 0xe1, 0x71, 0x3c, 0xf6, 0xff, 0xf6, 0xf2, 0x39, 0xe3, 0x0c, 0xbf, 0xa7],
            [0x6f, 0xde, 0x05, 0x9e, 0xf8, 0x6c, 0x70, 0xe4, 0x57, 0xaa, 0xbb, 0x38, 0x3a, 0xfa, 0x5b, 0xaf, 0x09, 0x08, 0x8f, 0x95, 0xfd, 0x83, 0x22, 0xf9, 0x57, 0xb6, 0x18, 0xdd, 0x02, 0x02, 0x77, 0xff],
            [0x13, 0xde, 0x70, 0x54, 0x84, 0x87, 0x4b, 0xb5, 0xe2, 0xab, 0xe4, 0xc5, 0x18, 0xce, 0x59, 0x9e, 0xb6, 0x48, 0x29, 0xe2, 0xd4, 0x0e, 0x41, 0xbd, 0xd0, 0xc5, 0x4d, 0xde, 0xb2, 0x6b, 0x86, 0xc0]
        ];
        
        let mut constants = vec![env];
        
        // Convert byte arrays to BlsScalar
        for bytes in ROUND_CONSTANTS_BYTES.iter() {
            constants.push_back(BlsScalar::from_bytes(BytesN::from_array(env, bytes)));
        }
        
        constants
    }
    
    /// Get MDS matrix for t=3 (from poseidon255_constants.circom)
    fn get_mds_matrix_t3(env: &Env) -> Vec<Vec<BlsScalar>> {
        // Precomputed byte arrays for MDS matrix t=3 to avoid runtime hex parsing
        const MDS_MATRIX_BYTES: [[[u8; 32]; 3]; 3] = [
            [
                [0x44, 0xd4, 0x6f, 0xa0, 0x1d, 0xa5, 0x11, 0x7c, 0xf3, 0xfb, 0xdb, 0xa0, 0x5a, 0xdc, 0x0a, 0x64, 0xaf, 0x6c, 0x34, 0xa5, 0x6f, 0x1e, 0x3c, 0x6c, 0xba, 0x01, 0xb7, 0xa5, 0x82, 0xaf, 0x88, 0x39],
                [0x3f, 0xe6, 0x67, 0xe0, 0x0c, 0x2b, 0x55, 0xca, 0xb4, 0x45, 0x07, 0x50, 0x5b, 0xba, 0x0e, 0x3a, 0x62, 0x6e, 0x1a, 0xe6, 0x05, 0x37, 0x8c, 0x99, 0x5a, 0x65, 0xa7, 0x84, 0xff, 0x14, 0xb2, 0x50],
                [0x63, 0xce, 0x26, 0xc4, 0x20, 0x6c, 0x02, 0x0d, 0x51, 0xde, 0xaa, 0x55, 0xff, 0xd4, 0xbb, 0x75, 0xf2, 0x33, 0x15, 0x16, 0x05, 0x35, 0x50, 0xb2, 0xab, 0x85, 0xfd, 0x26, 0x9b, 0xd8, 0x80, 0xd9]
            ],
            [
                [0x42, 0xef, 0x9c, 0xc1, 0x36, 0x81, 0xaf, 0xd5, 0xb0, 0x0d, 0xec, 0x34, 0x39, 0x54, 0x20, 0xd7, 0x89, 0x05, 0x03, 0x02, 0xf5, 0x5b, 0xfd, 0xf8, 0x14, 0x67, 0xc4, 0x5c, 0x79, 0x01, 0x91, 0x19],
                [0x0e, 0x55, 0x84, 0xfa, 0x58, 0x3d, 0xba, 0xe9, 0x5c, 0xe1, 0x3f, 0xb6, 0xbe, 0xfa, 0x8c, 0x6a, 0x87, 0x26, 0x03, 0x3d, 0xc2, 0xef, 0x49, 0xa2, 0x93, 0x5a, 0x0c, 0x87, 0x5e, 0x4e, 0x70, 0xb3],
                [0x5e, 0x86, 0x41, 0xd1, 0xc6, 0x2a, 0x0c, 0x9d, 0x1d, 0x2f, 0xdb, 0x56, 0x8d, 0xd5, 0xe2, 0x51, 0x59, 0xd2, 0xf0, 0xc2, 0x78, 0x52, 0x2a, 0xbe, 0x61, 0x4e, 0x27, 0xd5, 0xdf, 0x21, 0x7a, 0x8d]
            ],
            [
                [0x16, 0x58, 0x2a, 0x52, 0x7d, 0xd2, 0xea, 0xa7, 0x2f, 0xb3, 0x4e, 0x64, 0x04, 0xe4, 0xc5, 0xa3, 0x77, 0x86, 0x73, 0xb3, 0x33, 0x70, 0xe0, 0xc1, 0x61, 0x35, 0x48, 0x96, 0x1e, 0xba, 0x05, 0x0f],
                [0x0b, 0x69, 0xc4, 0xe8, 0xa5, 0x7a, 0xea, 0x1a, 0x66, 0x66, 0xcf, 0x14, 0xbb, 0xc5, 0x78, 0x1c, 0x27, 0x9d, 0x63, 0x86, 0xd1, 0x3f, 0xfe, 0x4d, 0xb2, 0x66, 0x29, 0x5b, 0x4d, 0x8f, 0x79, 0x53],
                [0x42, 0xd7, 0xe3, 0xdf, 0xfa, 0xf0, 0x72, 0x2a, 0x50, 0x79, 0x35, 0x3a, 0xbb, 0xcf, 0xb0, 0x45, 0x8b, 0x44, 0xca, 0xd3, 0x27, 0x80, 0x4e, 0xf6, 0x78, 0x0e, 0x71, 0xfe, 0x3a, 0x3d, 0x9a, 0x2a]
            ]
        ];

        let mut matrix = vec![env];
        for row in MDS_MATRIX_BYTES.iter() {
            let mut matrix_row = vec![env];
            for bytes in row.iter() {
                matrix_row.push_back(BlsScalar::from_bytes(BytesN::from_array(env, bytes)));
            }
            matrix.push_back(matrix_row);
        }
        matrix
    }
    
    /// Hash a single input (for t=2: 1 input + 1 capacity)
    pub fn hash(&self, input: &BlsScalar) -> BlsScalar {
        // For t=2, we have 1 input + 1 capacity element
        // Initialize as [capacity, input] like Circom does
        let zero = BlsScalar::from_u256(U256::from_u32(self.env, 0));
        let mut state = vec![self.env, zero, input.clone()]; // [capacity, input]
        
        // Apply all rounds with correct full/partial structure
        for round in 0..self.round_constants.len() / 2 {
            // Add round constant
            if round * 2 < self.round_constants.len() {
                state.set(0, state.get(0).unwrap() + self.round_constants.get(round * 2).unwrap());
            }
            if round * 2 + 1 < self.round_constants.len() {
                state.set(1, state.get(1).unwrap() + self.round_constants.get(round * 2 + 1).unwrap());
            }
            
            // Apply S-box based on round type
            if round < 4 || round >= 60 {
                // Full rounds (0-3 and 60-63): Apply S-box to all elements
                state.set(0, state.get(0).unwrap().pow(5));
                state.set(1, state.get(1).unwrap().pow(5));
            } else {
                // Partial rounds (4-59): Apply S-box only to first element
                state.set(0, state.get(0).unwrap().pow(5));
                // state[1] remains unchanged (no S-box)
            }
            
            // Apply MDS matrix
            let new_state_0 = state.get(0).unwrap() * self.mds_matrix.get(0).unwrap().get(0).unwrap() + 
                             state.get(1).unwrap() * self.mds_matrix.get(0).unwrap().get(1).unwrap();
            let new_state_1 = state.get(0).unwrap() * self.mds_matrix.get(1).unwrap().get(0).unwrap() + 
                             state.get(1).unwrap() * self.mds_matrix.get(1).unwrap().get(1).unwrap();
            state.set(0, new_state_0);
            state.set(1, new_state_1);
        }
        
        // Return the first element (as per Circom implementation)
        state.get(0).unwrap()
    }

    /// Hash two inputs using t=3 (2 inputs + 1 capacity)
    pub fn hash_two(&self, input1: &BlsScalar, input2: &BlsScalar) -> BlsScalar {
        // Create a new Poseidon instance with t=3 for two inputs
        // let poseidon_t3 = Poseidon255::new_with_t(self.env, 3);
        
        // For t=3, we have 2 inputs + 1 capacity element
        // Initialize state as [capacity, input1, input2]
        let zero = BlsScalar::from_u256(U256::from_u32(self.env, 0));
        let mut state = vec![self.env, zero, input1.clone(), input2.clone()];
        
        // Apply all rounds with correct full/partial structure for t=3
        for round in 0..self.round_constants.len() / 3 {
            // Add round constants
            for i in 0..3 {
                if round * 3 + i < self.round_constants.len() {
                    state.set(i, state.get(i).unwrap() + self.round_constants.get(round * 3 + i).unwrap());
                }
            }
            
            // Apply S-box based on round type
            if round < 4 || round >= 60 {
                // Full rounds (0-3 and 60-63): Apply S-box to all elements
                for i in 0..3 {
                    state.set(i, state.get(i).unwrap().pow(5));
                }
            } else {
                // Partial rounds (4-59): Apply S-box only to first element
                state.set(0, state.get(0).unwrap().pow(5));
                // state[1] and state[2] remain unchanged (no S-box)
            }
            
            // Apply MDS matrix
            let mut new_state = vec![self.env];
            for i in 0..3 {
                let mut sum = BlsScalar::from_u256(U256::from_u32(self.env, 0));
                for j in 0..3 {
                    sum = sum + state.get(j).unwrap() * self.mds_matrix.get(i).unwrap().get(j).unwrap();
                }
                new_state.push_back(sum);
            }
            state = new_state;
        }
        
        // Return the first element (as per Circom implementation)
        state.get(0).unwrap()
    }

    /// Parse a hex string into a BlsScalar
    /// This can handle large hex values that exceed u64/u128 range
    fn parse_hex_to_scalar(env: &Env, hex_str: &str) -> BlsScalar {
        let hex_str = hex_str.trim_start_matches("0x");
        let mut bytes = [0u8; 32];
        let hex_len = hex_str.len();
        
        // Calculate how many bytes we'll actually parse
        let num_bytes = (hex_len + 1) / 2;
        
        // Right-align the bytes (pad with zeros on the left for shorter hex strings)
        let offset = 32 - num_bytes;
        
        // Parse hex string pairs from left to right
        for i in 0..num_bytes {
            let hex_start = i * 2;
            let hex_end = (hex_start + 2).min(hex_len);
            
            // Parse this hex byte
            let hex_byte = &hex_str[hex_start..hex_end];
            bytes[offset + i] = Self::parse_hex_byte(hex_byte);
        }
        
        BlsScalar::from_bytes(BytesN::from_array(env, &bytes))
    }
    
    #[inline]
    fn parse_hex_byte(hex_byte: &str) -> u8 {
        let bytes = hex_byte.as_bytes();
        let high = Self::hex_char_to_nibble(bytes[0]);
        let low = if bytes.len() > 1 {
            Self::hex_char_to_nibble(bytes[1])
        } else {
            0
        };
        (high << 4) | low
    }
    
    #[inline]
    fn hex_char_to_nibble(c: u8) -> u8 {
        match c {
            b'0'..=b'9' => c - b'0',
            b'a'..=b'f' => c - b'a' + 10,
            b'A'..=b'F' => c - b'A' + 10,
            _ => 0,
        }
    }


}

#[cfg(test)]
mod test;

